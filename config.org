#+TITLE: Emacs Configuration
#+STARTUP: overview
#+TODO: TODO CHECK

For useful and good packages, see also [[https://github.com/emacs-tw/awesome-emacs#web-feed]].

* Package management
Package management is done with straight.el now. The bootstrapping of this has been moved to my init.el since this allows to use straight.el to load org mode which is required for the literate configuration you see here. Otherwise emacs would use the built-in version of org which may be too old for the more bleeding edge character of a straight.el maintained emacs installation.
straight.el offers the 'use-package' command (see also init.el).

* Basic personal information
  
** This is used to identify myself, and to find my own GnuPG key
  
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Julian Flake")
(setq user-mail-address "julian@flake.de")
#+END_SRC

** My default browser is chromium:
  #+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-chromium)
  #+END_SRC

** TODO Some localizations for the calendar

Holidays are not shown in agenda-hoidays (org-agenda 'h')

#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1
          calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                   "Donnerstag" "Freitag" "Samstag"]
          calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                     "Juni" "Juli" "August" "September"
                                     "Oktober" "November" "Dezember"])
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (setq solar-n-hemi-seasons
        '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "Neujahr")
          (holiday-fixed 5 1 "1. Mai")
          (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

  ;; Feiertage für Bayern, weitere auskommentiert
  (setq holiday-christian-holidays
        '((holiday-float 12 0 -4 "1. Advent" 24)
          (holiday-float 12 0 -3 "2. Advent" 24)
          (holiday-float 12 0 -2 "3. Advent" 24)
          (holiday-float 12 0 -1 "4. Advent" 24)
          (holiday-fixed 12 25 "1. Weihnachtstag")
          (holiday-fixed 12 26 "2. Weihnachtstag")
          (holiday-fixed 1 6 "Heilige Drei Könige")
          (holiday-easter-etc -48 "Rosenmontag")
          ;; (holiday-easter-etc -3 "Gründonnerstag")
          (holiday-easter-etc  -2 "Karfreitag")
          (holiday-easter-etc   0 "Ostersonntag")
          (holiday-easter-etc  +1 "Ostermontag")
          (holiday-easter-etc +39 "Christi Himmelfahrt")
          (holiday-easter-etc +49 "Pfingstsonntag")
          (holiday-easter-etc +50 "Pfingstmontag")
          (holiday-easter-etc +60 "Fronleichnam")
          (holiday-fixed 8 15 "Mariae Himmelfahrt")
          (holiday-fixed 11 1 "Allerheiligen")
          ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
          (holiday-float 11 0 1 "Totensonntag" 20)))
  #+END_SRC
* Look & Feel
** General appearance
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) ; switch off menu bar
  (tool-bar-mode -1) ; switch off tool bar
  (scroll-bar-mode -1) ; switch off scroll bar
  (column-number-mode t) ; show column number next to line number
  (setq visible-bell t)
  (setq inhibit-startup-screen t) ;; don't show splash
#+END_SRC
** Theme
*** solarized
#+BEGIN_SRC emacs-lisp
;;  (use-package solarized-theme
;;    :config (load-theme 'solarized-dark t))
#+END_SRC
*** zenburn
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
      :config (load-theme 'zenburn t))
#+END_SRC

** Diminish

This is to hide minor modes from mode line. You can use `:diminish foo-mode` then in use-package(...)

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC
   
** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
  '(font . "Hack-12"))
#+END_SRC

** Line numbers on the left
   
Since Emacs 26 there is `display-line-numbers-mode`:
#+BEGIN_SRC emacs-lisp
  ;; (global-display-line-numbers-mode)
#+END_SRC

** A beautiful modeline

   #+BEGIN_SRC emacs-lisp
   (use-package powerline
     :config
     (powerline-center-theme))
   #+END_SRC

** beacon: find cursors

   #+BEGIN_SRC emacs-lisp
   (use-package beacon
     :config
     (progn
       (setq beacon-blink-when-focused t)
       (setq beacon-blink-when-buffer-changes t)
       (setq beacon-blink-when-window-scrolls t)
       (setq beacon-blink-when-window-changes t)
       (setq beacon-blink-when-point-moves t)
       (beacon-mode 1)))
   #+END_SRC

** Smart paranthesis

An alternative to /smartparens/ is /paren/.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode t)
      (show-paren-mode t)))
#+END_SRC

* Org Mode
** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (add-to-list 'org-modules 'org-protocol)
    ;;    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (setq org-directory "~/org")
    (setq org-agenda-files (quote ("~/org/gtd.org" "~/org/tickler.org")))
    (setq org-refile-targets (quote (("~/org/gtd.org" :maxlevel . 4)
                                     ("~/org/someday.org" :maxlevel . 1)
                                     ("~/org/tickler.org" :maxlevel . 1))))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-default-notes-file (concat org-directory "/inbox.org"))
    (setq org-archive-location (concat org-directory "/archive/archive-" (format-time-string "%Y" (current-time)) ".org::datetree/"))
    (setq org-export-backends (quote (ascii beamer html icalendar latex md odt)))
    (setq org-tag-alist '(("@home" . ?h) ("@work" . ?w) ("@phone" . ?p) ("@boat" . ?b) ("@org" . ?o) ("@city" . ?c) ("@ToRead" . ?r)))
    (setq org-todo-keywords '((sequence "TODO(t)" "FREQ(f)" "PROJ(p)" "WAIT(w@/!)" "|" "DONE(d!)" "CNCL(c@/!)")))
    (setq org-todo-repeat-to-state t)
    (setq org-startup-indented t)
    (setq org-startup-truncated nil)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-num-skip-unnumbered t)
    (setq org-agenda-window-setup "only-window")
    (setq org-agenda-span 1)
    (setq org-stuck-projects
          '("+LEVEL=2/-DONE-CNCL-FREQ"
            ("TODO" "NEXT" "WAIT" "PROJ")
            nil ""))
    (setq org-capture-templates
          '(
            ("t" "Todo" entry (file "~/org/inbox.org") "* TODO %?\n  %i")
            ))
    (setq org-src-tab-acts-natively t)
    (setq org-ellipsis " ⤵") 
    (set-face-underline 'org-ellipsis nil) ;; …, ⤵, ▼, ↴, ⬎, ⤷, ⋱
    (setq org-ctrl-k-protect-subtree t)
    (setq org-return-follows-link t)
    
  )
#+END_SRC

** org-journal

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :after org
    :config
    (setq org-journal-dir "~/org/journal/")
    (setq org-journal-file-type 'weekly)
    (setq org-journal-file-format "journal-%Y.org")
    (setq org-journal-date-format "%A, %d %B %Y")
    (setq org-journal-created-property-timestamp-format "%Y-%m-%d")
    (setq org-journal-time-format ""))
#+END_SRC

** org-ref
#+BEGIN_SRC emacs-lisp
  ;; org-ref
  (use-package org-ref
    :after org)
#+END_SRC

** org-superstar

- Beautiful bullets
- org-superstar is a descendent of org-bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))
#+END_SRC

** org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (org-roam-setup)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+END_SRC

** htmlize

- used by org to export to HTML
  
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

* Other major modes
** AucTeX

#+BEGIN_SRC emacs-lisp
   (use-package auctex
   :defer t
   :init
   (setq TeX-auto-save t)
   (setq TeX-parse-self t)
   (setq-default TeX-master nil)
   ;; https://askubuntu.com/questions/1041919/integration-of-emacs-lualatex-with-evince-zathura-not-working-in-ubuntu-18-04-h
   (setq TeX-source-correlate-method 'synctex)
   (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
   (setq TeX-source-correlate-start-server t)
   (setq TeX-view-program-selection '((output-pdf "Zathura")))
   (add-to-list 'load-path "/usr/bin/vendor_perl")
   )
#+END_SRC

** RefTex
#+BEGIN_SRC emacs-lisp

  (use-package reftex
    :init
    (setq reftex-default-bibliography '("~/Dokumente/Literatur/Literatur.bib")))
#+END_SRC

** web-mode & php-mode

   #+BEGIN_SRC emacs-lisp
   (use-package web-mode)
   (use-package php-mode)
   #+END_SRC

** yaml-mode

   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode)
   #+END_SRC

** markdown-mode

   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode)
   #+END_SRC

** Platform.io

#+BEGIN_SRC emacs-lisp
  (use-package platformio-mode)
#+END_SRC
* Minor modes & Common packages
** vundo / undo-tree (C-x u)

The package /vundo/ seems to be a more modern implementation than undo-tree.
#+BEGIN_SRC emacs-lisp
  (use-package vundo
    :config
    (setq vundo-glyph-alist vundo-unicode-symbols))
#+END_SRC
The global keybinding 'C-x u' is set below.


The package /undo-tree/ contains more features than vundo, e.g. timestamps, diffs, etc. I never used those features.
#+BEGIN_SRC emacs-lisp
;;  (use-package undo-tree
;;    :diminish undo-tree-mode
;;    :config
;;    (global-undo-tree-mode))
#+END_SRC

** Agressive Indent

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config (aggressive-indent-global-mode))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile)
#+END_SRC

** helm
Incremental completions and narrowing selections:

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :config
    (helm-mode))
#+END_SRC

** helm-bibtex
#+BEGIN_SRC emacs-lisp
  (use-package helm-bibtex
    :config
    (helm-delete-action-from-source "Insert Citation" helm-source-bibtex)
    (helm-add-action-to-source "Insert Citation" 'helm-bibtex-insert-citation helm-source-bibtex 0)
    (setq bibtex-completion-cite-prompt-for-optional-arguments nil)
    (setq bibtex-completion-bibliography '("~/Dokumente/Literatur/Literatur.bib"))
    (setq bibtex-completion-library-path '("~/Dokumente/Literatur/bibtex-pdfs/"))
    (setq bibtex-completion-pdf-field "file")
    (setq bibtex-completion-notes-path "~/Dokumente/Literatur/notes/")
    ;;    (setq bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n")
    (setq bibtex-completion-additional-search-fields '(keywords))
    (setq bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "xdg-open" nil 0 nil fpath)))

    ;; doesn't seem to work as intended
    ;; see https://github.com/tmalsburg/helm-bibtex#refresh-bibliography-when-new-pdfs-and-notes-are-added
    ;; and https://github.com/tmalsburg/helm-bibtex/issues/369
    (setq flake-pdf-watch
          (file-notify-add-watch (car bibtex-completion-library-path)
                                 '(change)
                                 (lambda (event) (bibtex-completion-candidates))))
    (setq flake-notes-watch
          (file-notify-add-watch bibtex-completion-notes-path
                                 '(change)
                                 (lambda (event) (bibtex-completion-candidates))))
    )
#+END_SRC

** which-key

 This helps to figure out the next keystrokes

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode +1))
#+END_SRC

** Syntax check and auto completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :config
    (add-hook 'after-init-hook #'global-company-mode))

  (use-package flycheck
    :diminish flycheck-mode
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
 
** Git support

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

* Global key bindings
  Open the file under cursor:
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x f") 'find-file-at-point)
  #+END_SRC

  Replace some commands by its helm variants
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
    (global-set-key (kbd "C-x u") 'vundo)
  #+END_SRC

  Define global org related bindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c j") 'org-journal-new-entry)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link-hydra/body) ;; otherwise the org-mode-map overwrites the key with an agenda related binding
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-M-g") 'magit-status)
  #+END_SRC
