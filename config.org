#+TITLE: Emacs Configuration
#+STARTUP: overview
#+TODO: TODO CHECK SKIP

For useful and good packages, see also https://github.com/emacs-tw/awesome-emacs.

* Package management
Package management is done with straight.el now. The bootstrapping of this has been moved to my init.el since this allows to use straight.el to load org mode which is required for the literate configuration you see here. Otherwise emacs would use the built-in version of org which may be too old for the more bleeding edge character of a straight.el maintained emacs installation.
straight.el offers the 'use-package' command (see also init.el).

* Basic personal information
  
** This is used to identify myself, and to find my own GnuPG key
  
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Julian Flake")
(setq user-mail-address "julian@flake.de")
#+END_SRC

** My default browser is chromium:
  #+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-chromium)
  #+END_SRC

** TODO Some localizations for the calendar

Holidays are not shown in agenda-hoidays (org-agenda 'h')

#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1
          calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                   "Donnerstag" "Freitag" "Samstag"]
          calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                     "Juni" "Juli" "August" "September"
                                     "Oktober" "November" "Dezember"])
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (setq solar-n-hemi-seasons
        '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "Neujahr")
          (holiday-fixed 5 1 "1. Mai")
          (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

  ;; Feiertage für Bayern, weitere auskommentiert
  (setq holiday-christian-holidays
        '((holiday-float 12 0 -4 "1. Advent" 24)
          (holiday-float 12 0 -3 "2. Advent" 24)
          (holiday-float 12 0 -2 "3. Advent" 24)
          (holiday-float 12 0 -1 "4. Advent" 24)
          (holiday-fixed 12 25 "1. Weihnachtstag")
          (holiday-fixed 12 26 "2. Weihnachtstag")
          (holiday-fixed 1 6 "Heilige Drei Könige")
          (holiday-easter-etc -48 "Rosenmontag")
          ;; (holiday-easter-etc -3 "Gründonnerstag")
          (holiday-easter-etc  -2 "Karfreitag")
          (holiday-easter-etc   0 "Ostersonntag")
          (holiday-easter-etc  +1 "Ostermontag")
          (holiday-easter-etc +39 "Christi Himmelfahrt")
          (holiday-easter-etc +49 "Pfingstsonntag")
          (holiday-easter-etc +50 "Pfingstmontag")
          (holiday-easter-etc +60 "Fronleichnam")
          (holiday-fixed 8 15 "Mariae Himmelfahrt")
          (holiday-fixed 11 1 "Allerheiligen")
          ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
          (holiday-float 11 0 1 "Totensonntag" 20)))
  #+END_SRC
* Look & Feel
** General appearance
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) ; switch off menu bar
  (tool-bar-mode -1) ; switch off tool bar
  (scroll-bar-mode -1) ; switch off scroll bar
  (column-number-mode t) ; show column number next to line number
  (global-hl-line-mode t) ; highlight the current line
  (setq visible-bell t)
  (setq inhibit-startup-screen t) ;; don't show splash
#+END_SRC
** Theme
*** SKIP solarized
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package solarized-theme
    :config (load-theme 'solarized-dark t))
#+END_SRC
*** zenburn
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config (load-theme 'zenburn t))
#+END_SRC

** Diminish

This is to hide minor modes from mode line. You can use `:diminish foo-mode` then in use-package(...)

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC
   
** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
  '(font . "Hack-12"))
#+END_SRC

** Line numbers on the left
   
Since Emacs 26 there is `display-line-numbers-mode`:
#+BEGIN_SRC emacs-lisp
  ;; (global-display-line-numbers-mode)
#+END_SRC

** All-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

** A beautiful modeline

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config
    (powerline-center-theme))
#+END_SRC

** Smart paranthesis

An alternative to /smartparens/ is /paren/.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode t)
      (show-paren-mode t)))
#+END_SRC

* Org Mode
** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    ;;    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (setq org-directory "~/org")
    (setq org-refile-targets (quote (("~/org/gtd.org" :maxlevel . 4)
                                    ("~/org/someday.org" :maxlevel . 1)
                                    ("~/org/tickler.org" :maxlevel . 1))))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-default-notes-file (concat org-directory "/inbox.org"))
    (setq org-archive-location (concat org-directory "/archive/archive-" (format-time-string "%Y" (current-time)) ".org::datetree/"))
    (setq org-export-backends (quote (ascii beamer html icalendar latex md odt)))
    (setq org-tag-alist '(("@home" . ?h)
                          ("@work" . ?w)
                          ("@phone" . ?p)
                          ("@boat" . ?b)
                          ("@org" . ?o)
                          ("@city" . ?c)
                          ("@ToRead" . ?r)))
    (setq org-todo-keywords '((sequence "TODO(t)" "FREQ(f)" "PROJ(p)" "WAIT(w@/!)" "|" "DONE(d!)" "CNCL(c@/!)")))
    (setq org-todo-repeat-to-state t)
    (setq org-startup-indented t)
    (setq org-startup-truncated nil)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-num-skip-unnumbered t)
    (setq org-agenda-files (quote ("~/org/gtd.org" "~/org/tickler.org")))
    (setq org-agenda-window-setup "only-window")
    (setq org-agenda-span 1)
    (setq org-stuck-projects
          '("+LEVEL=2/-DONE-CNCL-FREQ"
            ("TODO" "NEXT" "WAIT" "PROJ")
            nil ""))
    (setq org-capture-templates
          '(
            ("t" "Todo" entry (file "~/org/inbox.org") "* TODO %?\n  %i")
            ))
    (setq org-src-tab-acts-natively t)
    (setq org-ellipsis " ⤵")  ;; …, ⤵, ▼, ↴, ⬎, ⤷, ⋱
    (set-face-underline 'org-ellipsis nil)
    (setq org-ctrl-k-protect-subtree t)
    (setq org-return-follows-link t)

    (add-to-list 'org-modules 'org-protocol)

    ;; ox-latex specific configuration
    (add-to-list 'safe-local-variable-values '(org-latex-title-command . ""))
    (add-to-list 'safe-local-variable-values '(org-latex-toc-command . ""))
    (with-eval-after-load 'ox-latex
      (add-to-list 'org-latex-classes '("scrbook"
                                        "\\documentclass[11pt]{scrbook}"
                                        ("\\chapter{%s}" . "\\chapter*{%s}")
                                        ("\\section{%s}" . "\\section*{%s}")
                                        ("\\subsection{%s}" . "\\subsection*{%s}")
                                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))

                                        #+END_SRC

** org-contrib

This is needed to allow for not exporting to latex those org headings that are tagged :ignore:.

#+BEGIN_src emacs-lisp

  (use-package org-contrib)
  (use-package ox-extra
    :after org-contrib
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines)))
  
#+END_src

** org-journal

#+BEGIN_SRC emacs-lisp

  (use-package org-journal
      :after org
      :config
      (setq org-journal-dir "~/org/journal/")
      (setq org-journal-file-type 'weekly)
      (setq org-journal-file-format "journal-%Y.org")
      (setq org-journal-date-format "%A, %d %B %Y")
      (setq org-journal-created-property-timestamp-format "%Y-%m-%d")
      (setq org-journal-time-format ""))

#+END_SRC

** org-superstar

Beautiful bullets. org-superstar is a descendent of org-bullets.

#+BEGIN_SRC emacs-lisp

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))
  
#+END_SRC

** org-roam

Build a second brain with org-roam.

#+BEGIN_SRC emacs-lisp

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n g" . org-roam-graph)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (org-roam-db-autosync-mode)
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (org-roam-setup)
    ;; If using org-roam-protocol
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (require 'org-roam-protocol))

#+END_SRC

** htmlize

htmlize is used by org to export to HTML.
  
#+BEGIN_SRC emacs-lisp

  (use-package htmlize)
  
#+END_SRC

* Other major modes
** AucTeX

#+BEGIN_SRC emacs-lisp
   (use-package auctex
   :defer t
   :init
   (setq TeX-auto-save t)
   (setq TeX-parse-self t)
   (setq-default TeX-master nil)
   ;; https://askubuntu.com/questions/1041919/integration-of-emacs-lualatex-with-evince-zathura-not-working-in-ubuntu-18-04-h
   (setq TeX-source-correlate-method 'synctex)
   (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
   (setq TeX-source-correlate-start-server t)
   (setq TeX-view-program-selection '((output-pdf "Zathura")))
   (add-to-list 'load-path "/usr/bin/vendor_perl")
   )
#+END_SRC

** SKIP RefTex
#+BEGIN_SRC emacs-lisp

  ;; (use-package reftex
  ;;   :init
  ;;   (setq reftex-default-bibliography '("~/Dokumente/Literatur/Literatur.bib")))
#+END_SRC

** web-mode & php-mode

   #+BEGIN_SRC emacs-lisp
   (use-package web-mode)
   (use-package php-mode)
   #+END_SRC

** yaml-mode

   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode)
   #+END_SRC

** markdown-mode

   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode)
   #+END_SRC

** Platform.io

#+BEGIN_SRC emacs-lisp
  (use-package platformio-mode)
#+END_SRC
* Minor modes & Common packages
** Completion
*** Vertico

VERTical Interactive cOmpletion.

#+BEGIN_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+END_src

*** savehist

Saves history in completion lists (shows last selected entry on top)

#+BEGIN_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+END_src

*** marginalia

Enriches selection lists with additional information.

#+BEGIN_src emacs-lisp
  (use-package marginalia
    :config
    (marginalia-mode))
#+END_src

*** orderless

Completion style (prefix, fuzzy etc)

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+END_SRC
*** consult

Completion allows you to quickly select an item from a list of candidates.

#+BEGIN_SRC emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (
           ;; C-x bindings (ctl-x-map)
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)               ;; Alternative: consult-flymake
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")
  )

#+END_SRC
*** embark & embark-consult
#+BEGIN_SRC emacs-lisp
  (use-package embark
     :ensure t

     :bind
     (("C-." . embark-act)         ;; pick some comfortable binding
      ("C-;" . embark-dwim)        ;; good alternative: M-.
      ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

     :init

     ;; Optionally replace the key help with a completing-read interface
     (setq prefix-help-command #'embark-prefix-help-command)

     :config

     ;; Hide the mode line of the Embark live/completions buffers
     (add-to-list 'display-buffer-alist
                  '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                    nil
                    (window-parameters (mode-line-format . none)))))

   ;; Consult users will also want the embark-consult package.
   (use-package embark-consult
     :ensure t
     :after (embark consult)
     :demand t ; only necessary if you have the hook below
     ;; if you want to have consult previews as you move around an
     ;; auto-updating embark collect buffer
     :hook
     (embark-collect-mode . consult-preview-at-point-mode))
  #+END_SRC

*** citar & citar-embark

Allows to browse bibtex file(s), insert citations, open files, links and notes. It's a helm-bibtext replacement.

#+BEGIN_SRC emacs-lisp
    (use-package citar
      :bind (("C-c b" . citar-insert-citation)
             :map minibuffer-local-map
             ("M-b" . citar-insert-preset))
      :config
      (setq citar-bibliography '("~/Dokumente/Literatur/Literatur.bib"))
      (setq citar-library-paths '("~/Dokumente/Literatur/bibtex-pdfs"))
      (setq citar-notes-paths '("~/Dokumente/Literatur/notes")))

    (use-package citar-embark
      :after citar embark
      :no-require
      :config
      (citar-embark-mode))
#+END_SRC

** which-key

 This helps to figure out the next keystrokes

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode +1))
#+END_SRC

** vundo / undo-tree (C-x u)

The package /vundo/ seems to be a more modern implementation than undo-tree.
#+BEGIN_SRC emacs-lisp
  (use-package vundo
    :config
    (setq vundo-glyph-alist vundo-unicode-symbols))
#+END_SRC
The global keybinding 'C-x u' is set below.


The package /undo-tree/ contains more features than vundo, e.g. timestamps, diffs, etc. I never used those features.
#+BEGIN_SRC emacs-lisp
;;  (use-package undo-tree
;;    :diminish undo-tree-mode
;;    :config
;;    (global-undo-tree-mode))
#+END_SRC

** SKIP Agressive Indent

#+BEGIN_SRC emacs-lisp
  ;; (use-package aggressive-indent
  ;;   :config (aggressive-indent-global-mode))
#+END_SRC

** SKIP Projectile

#+BEGIN_SRC emacs-lisp
  ;; (use-package projectile
  ;;   :config
  ;;   (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  ;;   ;; Recommended keymap prefix on Windows/Linux
  ;;   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  ;;   (projectile-mode +1))
#+END_SRC

** Syntax check and auto completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :config
    (add-hook 'after-init-hook #'global-company-mode))

  (use-package flycheck
    :diminish flycheck-mode
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
 
** Git support

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

* Global key bindings
 
** General

Open the file under cursor:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x f") 'find-file-at-point)
#+END_SRC
  
** vundo

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x u") 'vundo)
#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c j") 'org-journal-new-entry)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c g") 'magit-status)
#+END_SRC
