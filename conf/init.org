#+TITLE: Emacs Configuration
#+TODO: TODO CHECK BROKEN DISABLED

For useful and good packages, see also [[https://github.com/emacs-tw/awesome-emacs#web-feed]].

* Basic personal information
  
  This is used to identify myself, and to find my own GnuPG key
  
  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Julian Flake")
  (setq user-mail-address "julian@flake.de")
  #+END_SRC

  My default browser is chromium:
  #+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-chromium)
  #+END_SRC


* Package management

  Setup additional repository melpa and initialize package.el:

  #+BEGIN_SRC emacs-lisp
  (require 'package)
  ;; standard elpa
  (add-to-list 'package-archives '("gnu"       . "http://elpa.gnu.org/packages/"))
  ;; melpa stable
  (add-to-list 'package-archives '("melpa"     . "https://stable.melpa.org/packages/"))
  ;; melpa unstable
  ;;(add-to-list 'package-archives '("melpa"     . "http://melpa.org/packages/"))
  ;; initialize package.el
;;  (package-initialize)
  #+END_SRC

  Install (if required) and initialize use-package.el:

  #+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))
  ;; set :ensure t with all packages
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  ;;(setq use-package-always-defer t)
  #+END_SRC
  
  Activate auto update of packages:

  #+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
  #+END_SRC

* Minor modes & Common packages
** undo-tree (C-x u)

   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :diminish undo-tree-mode
     :config
       (global-undo-tree-mode))
   #+END_SRC

** Treemacs

   Tree file explorer

   #+BEGIN_SRC emacs-lisp
   (use-package treemacs)
   #+END_SRC

** Projectile

   #+BEGIN_SRC emacs-lisp
   (use-package projectile)
   #+END_SRC

** A beautiful modeline

   #+BEGIN_SRC emacs-lisp
   (use-package powerline
     :config
     (powerline-center-theme))
   #+END_SRC

** Smart paranthesis

   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
     :ensure t
     :diminish smartparens-mode
     :config
     (progn
       (require 'smartparens-config)
       (smartparens-global-mode t)
       (show-paren-mode t)))
   #+END_SRC

** which-key

   This helps to figure out the next keystrokes

   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :diminish which-key-mode
     :config
     (which-key-mode +1))
   #+END_SRC

** Git support

   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :bind (("C-M-g" . magit-status)))
   #+END_SRC

** beacon: find cursors

   #+BEGIN_SRC emacs-lisp
   (use-package beacon
     :config
     (progn
       (setq beacon-blink-when-focused t)
       (setq beacon-blink-when-buffer-changes t)
       (setq beacon-blink-when-window-scrolls t)
       (setq beacon-blink-when-window-changes t)
       (setq beacon-blink-when-point-moves t)
       (beacon-mode 1)))
   #+END_SRC

** nlinum (line numbers on the left)
   
   Currently disabled, I like the minimalism at the moment.

   #+BEGIN_SRC emacs-lisp
   ;;(use-package linum)
   ;; NLinum is a replacement of linum
   (use-package nlinum)
   #+END_SRC

** ace-window
   
   More convenient switch to other windows:
   #+BEGIN_SRC emacs-lisp
   (use-package ace-window
     :bind ("M-o" . ace-window))
   #+END_SRC

** Syntax check and auto completion

   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :diminish company-mode
     :config
     (add-hook 'after-init-hook #'global-company-mode))

   (use-package flycheck
     :ensure t
     :diminish flycheck-mode
     :config
     (add-hook 'after-init-hook #'global-flycheck-mode))
   #+END_SRC
 
** BROKEN all-the-icons

   You have to install the fonts after installing the package:
   `M-x all-the-icons-install-fonts`

   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons)
   #+END_SRC

* Major modes
** org-mode

  #+BEGIN_SRC emacs-lisp
(use-package org
:defer t
:config
(setq org-directory "~/org")
(setq org-agenda-files (quote ("~/org/GTD.org" "~/org/Tickler.org" "~/org/Someday.org" "~/org/Food.org" "~/org/Einkaufen.org")))
(setq org-refile-targets (quote (("~/org/GTD.org" :maxlevel . 1) ("~/org/Someday.org" :maxlevel . 1) ("~/org/Einkaufen.org" :maxlevel . 1))))
(setq org-agenda-window-setup "only-window")
(setq org-agenda-span 1)
(setq org-default-notes-file (concat org-directory "/Notes.org"))
(setq org-export-backends (quote (ascii beamer html icalendar latex md odt)))
(setq org-archive-location "~/org/archive/Archive.org::datetree/")
(setq org-startup-indented t)
(setq org-startup-truncated nil)
(setq org-log-done 'time))

;; org-journal
(use-package org-journal
:after org
:ensure t
:defer t
:config
(setq org-journal-dir "~/org/journal/")
(setq org-journal-file-type 'weekly)
(setq org-journal-file-format "journal-%Y.org")
(setq org-journal-date-format "%A, %d %B %Y")
(setq org-journal-time-format ""))

;; org-ref
;;    (use-package org-ref
;;    :after org
;;    :ensure t
;;    :defer t
;;    :config
;;    (setq org-ref-default-bibliography '("~/Dokumente/Literatur/Literatur.bib"))
;;    (setq org-ref-bibliography-notes "~/Dokumente/Literatur/Notes.org")
;;    (setq org-ref-pdf-directory "~/Dokumente/Literatur/bibtex-pdfs/"))

;; Beautiful bullets
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

;; TRIGGER and BLOCKER properties
(use-package org-edna
  :hook (org-mode . org-edna-mode))

;; used by org to export to HTML
(use-package htmlize)
#+END_SRC

** web-mode

   #+BEGIN_SRC emacs-lisp
   (use-package web-mode)
   #+END_SRC

** yaml-mode

   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode)
   #+END_SRC

** markdown-mode

   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode)
   #+END_SRC

** AucTeX

   #+BEGIN_SRC emacs-lisp
   (use-package auctex
   :defer t
   :init
   ;; https://askubuntu.com/questions/1041919/integration-of-emacs-lualatex-with-evince-zathura-not-working-in-ubuntu-18-04-h
   (setq TeX-view-program-selection '((output-pdf "Zathura")))
   (setq TeX-source-correlate-method 'synctex)
   (setq TeX-source-correlate-start-server t)
   (setq TeX-auto-save t)
   (setq TeX-parse-self t)
   (setq-default TeX-master nil)
   (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
   (add-to-list 'load-path "/usr/bin/vendor_perl")
   )
   #+END_SRC

** Platform.io

   #+BEGIN_SRC emacs-lisp
   (use-package platformio-mode)
   #+END_SRC

* Look & Feel
** Solarized Theme
   
   #+BEGIN_SRC emacs-lisp
   (use-package solarized-theme
;     :config (load-theme 'solarized-dark t))
     :config (load-theme 'solarized-light t))
   #+END_SRC

** Diminish
    
This is to hide minor modes from mode line. You can use `:diminish foo-mode` then in use-package(...)

   #+BEGIN_SRC emacs-lisp
   (use-package diminish
     :ensure t)
   #+END_SRC
   
** Font
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
             '(font . "Hack-12"))
  #+END_SRC

** Other
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1) ; switch off menu bar
   (tool-bar-mode -1) ; switch off tool bar
   (scroll-bar-mode -1) ; switch off scroll bar
   (column-number-mode t) ; show column number next to line number
   (setq inhibit-startup-screen t) ;; don't show splash
   #+END_SRC

* Global key bindings
  Open the file under cursor:
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x f") 'find-file-at-point)
  #+END_SRC

  Replace some commands by its helm variants
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  #+END_SRC

  Replace some commands by its helm variants
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c j") 'org-journal-new-entry)
  (global-set-key (kbd "C-c c") 'org-store-link)
  (global-set-key (kbd "C-c l") 'org-capture)
  #+END_SRC
