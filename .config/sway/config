# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
set $alt Mod1

# Your preferred terminal emulator
set $term alacritty
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
#set $menu dmenu_path | dmenu | xargs swaymsg exec --
set $menu wofi

### Output configuration
#
# Default wallpaper (more resolutions are available in /gnu/store/5078j30nj5p179qci5p46lvcyjja42qh-sway-1.8/share/backgrounds/sway/)
#output * bg /gnu/store/5078j30nj5p179qci5p46lvcyjja42qh-sway-1.8/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
output * bg ~/.background-image fill

#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs
output eDP-1 position 3840 0
#output "Samsung Electric Company S27F350 HNHHA04215" position 0 0
#output "Samsung Electric Company S27F350 H4ZH401164" position 1920 0
# exec swaymsg focus output <name-or-identifier> # focus on launch

### Idle configuration
#
set $lockscreen 'swaylock -e -F --indicator-radius 100 -t -i ~/.lockscreen.png -s center -c 000000'
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
exec swayidle -w \
         timeout 300 $lockscreen \
         timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
         before-sleep $lockscreen
#

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
input "1:1:AT_Translated_Set_2_keyboard" {
      xkb_layout "de"
      xkb_options caps:ctrl_modifier
}
input "1133:16522:Logitech_MX_Keys" {
      xkb_layout "de"
      xkb_options caps:ctrl_modifier
}

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term
    # Start an emacs terminal
    bindsym $mod+Ctrl+Return exec emacsclient -c -a "" -e '(vterm)'
    # create new emacs frame
    bindsym $mod+Shift+Return exec emacsclient -c -a ""

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#

    # Define workspaces and names
    set $ws0 0:org
    set $ws1 1:mail
    set $ws2 2:web
    set $ws3 3:phd
    set $ws4 4
    set $ws5 5
    set $ws6 6
    set $ws7 7
    set $ws8 8
    set $ws9 9
    set $ws10 10
    set $ws11 11
      
    # Move workspace to current output and switch to it
    bindsym $mod+dead_circumflex [workspace=$ws0] move workspace to output current; workspace $ws0
    bindsym $mod+1 [workspace=$ws1] move workspace to output current; workspace $ws1
    bindsym $mod+2 [workspace=$ws2] move workspace to output current; workspace $ws2
    bindsym $mod+3 [workspace=$ws3] move workspace to output current; workspace $ws3
    bindsym $mod+4 [workspace=$ws4] move workspace to output current; workspace $ws4
    bindsym $mod+5 [workspace=$ws5] move workspace to output current; workspace $ws5
    bindsym $mod+6 [workspace=$ws6] move workspace to output current; workspace $ws6
    bindsym $mod+7 [workspace=$ws7] move workspace to output current; workspace $ws7
    bindsym $mod+8 [workspace=$ws8] move workspace to output current; workspace $ws8
    bindsym $mod+9 [workspace=$ws9] move workspace to output current; workspace $ws9
    bindsym $mod+0 [workspace=$ws10] move workspace to output current; workspace $ws10
    bindsym $mod+ssharp [workspace=$ws11] move workspace to output current; workspace $ws11

    # Move focused container to workspace
    bindsym $mod+Shift+dead_circumflex move container to workspace $ws0
    bindsym $mod+Shift+1 move container to workspace $ws1
    bindsym $mod+Shift+2 move container to workspace $ws2
    bindsym $mod+Shift+3 move container to workspace $ws3
    bindsym $mod+Shift+4 move container to workspace $ws4
    bindsym $mod+Shift+5 move container to workspace $ws5
    bindsym $mod+Shift+6 move container to workspace $ws6
    bindsym $mod+Shift+7 move container to workspace $ws7
    bindsym $mod+Shift+8 move container to workspace $ws8
    bindsym $mod+Shift+9 move container to workspace $ws9
    bindsym $mod+Shift+0 move container to workspace $ws10
    bindsym $mod+Shift+ssharp move container to workspace $ws11
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+h splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"
bindsym $mod+Ctrl+Left resize shrink width 10 px or 10 ppt
bindsym $mod+Ctrl+Down resize grow height 10 px or 10 ppt
bindsym $mod+Ctrl+Up resize shrink height 10 px or 10 ppt
bindsym $mod+Ctrl+Right resize grow width 10 px or 10 ppt

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    position top
    swaybar_command waybar
}


#
# Notifications
#
#
exec swaync
bindsym $mod+Shift+n exec swaync-client -t -sw

# borders

# avoid title bars
default_border pixel 3
hide_edge_borders smart
default_floating_border pixel 3

# gaps
gaps inner 10px
gaps outer 0px
smart_gaps on

# media and special keys
bindsym XF86AudioRaiseVolume exec --no-startup-id wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+ -l 1.5
bindsym XF86AudioLowerVolume exec --no-startup-id wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- -l 1.5
bindsym XF86AudioMute 	     exec --no-startup-id wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindsym XF86AudioMicMute     exec --no-startup-id wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
# Screen brightness controls
bindsym XF86MonBrightnessUp exec brightnessctl set 5%+
bindsym XF86MonBrightnessDown exec brightnessctl set 5%-

# Screenshots
bindsym $mod+Shift+s exec grim
bindsym $mod+$alt+s exec grim -g "$(slurp)"


set $mode_system System: (l) lock, (e) logout, (s) suspend, (Shift+r) reboot, (Shift+s) shutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id $lockscreen, mode "default"
    bindsym e exec --no-startup-id swaymsg exit, mode "default"
    bindsym s exec --no-startup-id loginctl suspend, mode "default"
    bindsym Shift+r exec --no-startup-id loginctl reboot, mode "default"
    bindsym Shift+s exec --no-startup-id loginctl poweroff, mode "default"

    # back to normal: Enter or Escape or $mod+Delete
    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+Delete mode "default"
}
bindsym $mod+Delete mode "$mode_system"

# additional key bindings of workspace management
bindsym $mod+Tab workspace next_on_output
bindsym $mod+Shift+Tab workspace prev_on_output
bindsym $mod+Escape workspace back_and_forth
# move workspace to neighbouring output
bindsym $mod+o move workspace to output right
bindsym $mod+Shift+o move workspace to output left

# Screen lock
bindsym Control+mod1+Delete exec $lockscreen

# window rules
# to get app_ids use $ swaymsg -t get_tree | grep app_id

# Set Some windows to float by default
for_window [app_id="nm-connection-editor"] floating enable
for_window [app_id="nm-applet"] floating enable
for_window [app_id="pavucontrol"] floating enable
for_window [app_id=".blueman-manager-real"] floating enable
for_window [app_id="com.nextcloud.desktopclient.nextcloud"] floating enable
for_window [title="MGC"] floating enable # MazeGameClient

# Autostart
exec_always --no-startup-id "pkill kanshi; exec kanshi"

exec --no-startup-id {
    dbus-update-activation-environment --all
    gnome-keyring-daemon
    nm-applet
    blueman-applet
    nextcloud --background
    udiskie -s # -t or -s (show applet always or with actions available only
    solaar -w hide
    geoclue
    gammastep-indicator
    pipewire
    pipewire-pulse
    wireplumber
    poweralertd
    emacs --daemon
}
