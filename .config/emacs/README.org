#+TITLE: Emacs Configuration
#+STARTUP: content
#+PROPERTY: header-args :tangle yes
#+TODO: TODO COMMENT

* Startup time

Taken from /emacs from scratch/.
#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

#+RESULTS:
| efs/display-startup-time |

* Basic personal information
  
** This is used to identify myself, and to find my own GnuPG key
  
#+begin_src emacs-lisp
  (setq user-full-name "Julian Flake")
  (setq user-mail-address "julian@flake.de")
#+end_src

** Some localizations for the calendar
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1
        calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                 "Donnerstag" "Freitag" "Samstag"]
        calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                   "Juni" "Juli" "August" "September"
                                   "Oktober" "November" "Dezember"]
        calendar-intermonth-text
        '(propertize
  	(format "%2d"
  		(car
  		 (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
  	'font-lock-face 'font-lock-function-name-face))

  (setq solar-n-hemi-seasons
        '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "Neujahr")
          (holiday-fixed 5 1 "1. Mai / Tag der Arbeit")
          (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

  ;; Feiertage für Bayern, weitere auskommentiert
  (setq holiday-christian-holidays
        '(;;(holiday-fixed 1 6 "Heilige Drei Könige")
          (holiday-easter-etc -48 "Rosenmontag")
          ;; (holiday-easter-etc -3 "Gründonnerstag")
          (holiday-easter-etc  -2 "Karfreitag")
          (holiday-easter-etc   0 "Ostersonntag")
          (holiday-easter-etc  +1 "Ostermontag")
          (holiday-easter-etc +39 "Christi Himmelfahrt")
          (holiday-easter-etc +49 "Pfingstsonntag")
          (holiday-easter-etc +50 "Pfingstmontag")
          (holiday-easter-etc +60 "Fronleichnam")
          ;;(holiday-fixed 8 15 "Mariae Himmelfahrt")
          (holiday-fixed 11 1 "Allerheiligen")
          ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
    	(holiday-float 11 0 1 "Totensonntag" 20)
    	(holiday-float 12 0 -4 "1. Advent" 24)
          (holiday-float 12 0 -3 "2. Advent" 24)
          (holiday-float 12 0 -2 "3. Advent" 24)
          (holiday-float 12 0 -1 "4. Advent" 24)
          (holiday-fixed 12 25 "1. Weihnachtstag")
          (holiday-fixed 12 26 "2. Weihnachtstag")))
#+end_src
* File handling
** Make use of system's trash and use y-or-n-p instead of yes-or-no-p
#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
  (setq dired-deletion-confirmer #'y-or-n-p)
#+end_src

** Keep folders clean

#+begin_src emacs-lisp
  ;; backup files: file.ext~
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  ;; auto-save files: #file.ext#
  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory))
  (setq auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  ;; undo-tree-mode files: .file.ext.~undo-tree~
  (setq undo-tree-history-directory-alist `(("." . ,(expand-file-name "tmp/undo-tree/" user-emacs-directory))))
#+end_src

** Auto revert unchanged files (PDF only for now)

#+begin_src emacs-lisp
  (setq revert-without-query '(".pdf"))
#+end_src

* Look & feel
** Font

I set my default fonts in ~~/.fonts.conf~. This is just an example:

#+begin_src xml :tangle no
  <?xml version="1.0"?>
  <!DOCTYPE fontconfig SYSTEM "urn:fontconfig:fonts.dtd">
  <fontconfig>
    <alias>
      <family>monospace</family>
      <prefer>
        <family>Fira Code</family>
      </prefer>
    </alias>
    <alias>
      <family>sans-serif</family>
      <prefer>
        <family>Noto Sans</family>
      </prefer>
    </alias>
  </fontconfig>
#+end_src

** Ligatures

#+begin_src emacs-lisp
  (use-package ligature
    :config
    ;; Enable the www ligature in every possible major mode
    ;; (ligature-set-ligatures 't '("www"))

    ;; Enable the www ligature in every possible major mode
    (ligature-set-ligatures 'org-mode '("www" "->"))

    ;; Enable ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                         ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                         "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                         "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                         "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                         "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                         "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                         "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                         "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                         "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
    (global-ligature-mode 't))
#+end_src

** General appearance

#+begin_src emacs-lisp
  (use-package emacs :ensure nil
    :config
    (menu-bar-mode -1) ; switch off menu bar
    (tool-bar-mode -1) ; switch off tool bar
    (scroll-bar-mode -1) ; switch off scroll bar
    (column-number-mode t) ; show column number next to line number
    (global-hl-line-mode t) ; highlight the current line
    (setq visible-bell t)
    (setq inhibit-startup-screen t)) ;; don't show splash
#+end_src

** Theme
Modus Themes. To switch between light (operandi) and dark (vivendi) theme, auto-dark is used. Switching between light and dark is then possible by one the following commands:
- ~gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark~ or 
- ~gsettings set org.gnome.desktop.interface color-scheme 'prefer-light'~, respectively
  
#+begin_src emacs-lisp
  (use-package modus-themes)
  (use-package auto-dark
    :after modus-themes
    :config
    (setq auto-dark-themes '((modus-vivendi) (modus-operandi)))
    (auto-dark-mode 1))
#+end_src

** doom-modeline (a beautiful modeline)

#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    ;;(setq doom-modeline-height 18)
    (setq doom-modeline-total-line-number t)
    (setq doom-modeline-mu4e t)
    (doom-modeline-mode 1))
#+end_src

** Spacious Padding
#+begin_src emacs-lisp
  (use-package spacious-padding
    :config
    (setq spacious-padding-widths
  	'( :internal-border-width 15
  	   :header-line-width 4
  	   :mode-line-width 6
  	   :tab-width 4
  	   :right-divider-width 30
  	   :scroll-bar-width 8))
    (spacious-padding-mode 1))
#+end_src

** Kill dired buffers instead of quitting them
- https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer says:
  Starting with Emacs 28.1, you can customize option ‘dired-kill-when-opening-new-dired-buffer’ to non-`nil`, to kill the current Dired buffer when you create a new one.
#+begin_src emacs-lisp
  (setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

** Smooth scrolling

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode)
  (setq pixel-scroll-precision-large-scroll-height 40.0)
#+end_src

** Window numbering
This minor mode allows to switch windows in a frame by M-x, while x is a number that is shown in the modeline of each window.
#+begin_src emacs-lisp
  (use-package window-numbering
    :config
    (window-numbering-mode))
#+end_src

** Diminish

This is to hide minor modes from mode line. You can use `:diminish foo-mode` then in use-package(...)

#+begin_src emacs-lisp
  (use-package diminish
    :config
    (diminish 'smartparens-mode)
    (diminish 'flycheck-mode)
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode))
#+end_src
   
** Visual line mode in text-mode
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook
  	  (lambda ()
   	    (visual-line-mode 1)))
#+end_src

** Show search result counts in modeline

#+begin_src emacs-lisp
  (setq isearch-lazy-count t)
  (setq isearch-lazy-highlight t)
#+end_src

** Line numbers on the left
   
=display-line-numbers-mode= is a built in minor mode

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 0)
  ;; Disable line numbers for some modes
    ;; (dolist (mode '(org-mode-hook
    ;; 		org-agenda-mode-hook
    ;;                 vterm-mode-hook
    ;;                 term-mode-hook
    ;;                 shell-mode-hook
    ;;                 eshell-mode-hook
    ;;                 pdf-view-mode-hook
    ;; 		nov-mode-hook))
    ;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
    ;; Enable line numbers for some modes
    (dolist (mode '(prog-mode-hook))
      (add-hook mode (lambda ()
  		     (display-line-numbers-mode 1))))
#+end_src

** Smart paranthesis & Highlight (rainbowishly) parenthesis

An alternative to /smartparens/ is /paren/.

#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode t)
      (show-paren-mode t)))
#+end_src

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** All-the-icons

You must run 'M-x all-the-icons-install-fonts' to actually download the icons to '~/.local/share/fonts/'.

#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-completion
    :config (all-the-icons-completion-mode))
#+end_src

** COMMENT Highlight indent guides
#+begin_src emacs-lisp :tangle no
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-method 'character)
    ;; To enable automatically in most programming modes:
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src

** Olivetti mode (writing environment)

#+begin_src emacs-lisp
  (use-package olivetti)
#+end_src

* Org mode
** Org Mode basics: Look&Feel, task management, capture templates, LaTex export
*** Org's basics & Look & Feel

#+begin_src emacs-lisp
  (defun jf/org-setup-look-and-feel ()
    (set-face-underline 'org-ellipsis nil)
    (setq org-ellipsis " …")
    (setq org-clock-sound "~/Music/alarm.wav")
    (setq org-startup-indented t)
    (setq org-startup-truncated nil)
    (setq org-src-tab-acts-natively t)
    (setq org-ctrl-k-protect-subtree t)
    (setq org-return-follows-link t)
    (setq org-num-skip-unnumbered t)
    (setq org-num-skip-tags (list "ignore" "noexport" "unnumbered"))
    (setq org-goto-interface 'outline-path-completion)
    (setq org-cite-global-bibliography '("~/Documents/Literatur/Literatur.bib"))
    (add-hook 'org-mode-hook (lambda ()
       			     (visual-line-mode 1)
  			     (variable-pitch-mode 1)))
    ;; Force to fixed-pitch certain elements in org mode, when I switch to variable-pitch-mode
    ;; To find the face at point, use 'C-u C-x =' (~what-cursor-position~ with prefix)
    (custom-theme-set-faces
     'user
     '(org-block ((t (:inherit fixed-pitch))))
     '(org-block-begin-line ((t (:inherit shadow fixed-pitch))))
     '(org-block-end-line ((t (:inherit shadow fixed-pitch))))
     '(org-checkbox ((t (:inherit (fixed-pitch)))))
     '(org-code ((t (:inherit (shadow fixed-pitch)))))
     '(org-date ((t (:inherit (fixed-pitch)))))
     '(org-document-info ((t (:foreground "dark orange"))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-done ((t (:inherit (fixed-pitch)))))
     '(org-drawer ((t (:inherit (fixed-pitch)))))
     '(org-formula ((t (:inherit (fixed-pitch)))))
     '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     '(org-link ((t (:foreground "royal blue" :underline t))))
     '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
     '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     '(org-target ((t (:inherit (fixed-pitch)))))
     '(org-todo ((t (:inherit (fixed-pitch)))))
     '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
        
    ;; beautiful bullets
    (use-package org-superstar
      :config
      (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))))
#+end_src

*** Task Management, Agenda, Archive, Refiling

#+begin_src emacs-lisp
  (defun jf/org-setup-task-management-and-agenda ()
    ;; Task management
    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/inbox.org"))
    (setq org-tag-alist '(("direct" . ?d)
                          ("personal" . ?p)
                          ("house" . ?h)
                          ("promotion" . ?P)
                          ("reading" . ?r)
                          ("work" . ?w)
                          ("teaching" . ?t)
                          ("sail" . ?S)
                          ("nerdism" . ?n)))
    (setq org-todo-keywords '((sequence "TODO(t)" "FREQ(f)" "EVNT(e)" "PROJ(p)" "WAIT(w/!)" "|" "SKIP(s!)" "DONE(d!)" "CNCL(c/!)")))
    (setq org-todo-repeat-to-state t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; Agenda
    (setq org-agenda-files '("~/org/gtd.org"
                             "~/org/tickler.org"
                             "~/org/inbox.org"
                             "~/org/calendar.org"))
    ;; the file calendar.org is read-only, allow this file-local-variable to be set.
    ;; See Troubleshooting section in README.org at https://gitlab.com/hperrey/khalel/
    (setq safe-local-variable-values
          (quote
           ((buffer-read-only . 1))))

    (setq org-agenda-window-setup 'current-window)
    (setq org-agenda-span 1)
    (setq org-agenda-time-grid
          '((daily today require-timed remove-match)
            (800 1000 1200 1400 1600 1800 2000)
            " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    (setq org-agenda-include-diary nil)
    (setq org-agenda-custom-commands
          '(
            ("w" "Weekly cleanup" todo "CNCL|DONE")
  	  ("d" "Deadlines" agenda "Show deadlines"
  	   ((org-agenda-span 'year)
  	    (org-agenda-time-grid nil)
  	    (org-agenda-show-all-dates nil)
  	    (org-agenda-entry-types '(:deadline)) ;; this entry excludes :scheduled
  	    (org-deadline-warning-days 0)))
            ("c" "Important events" agenda* nil
             ((org-agenda-files '("~/org/calendar.org"))
              (org-agenda-span 7)
              (org-agenda-skip-function '(org-agenda-skip-entry-if
                                          'regexp ":C3RE:\\|:AfH:\\|:Mond:"))))
            ("C" "All events" agenda* nil
             ((org-agenda-files '("~/org/calendar.org"))
              (org-agenda-span 7)))))

    (setq org-stuck-projects '("-noproject+LEVEL=2/-DONE-FREQ"
                               ("TODO" "NEXT")
                               nil ""))
    (setq org-deadline-warning-days 7)
    ;; Refiling
    (setq org-refile-targets (quote (("~/org/gtd.org" :maxlevel . 4)
                                     ("~/org/someday.org" :maxlevel . 1)
                                     ("~/org/tickler.org" :maxlevel . 1))))
    (setq org-refile-use-outline-path 'file)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-outline-path-complete-in-steps nil)

    ;; Archive
    (setq org-archive-location (concat org-directory "/archive/archive-" (format-time-string "%Y" (current-time)) ".org::datetree/")))
#+end_src

*** Safe elisp org-links

#+begin_src emacs-lisp
  (defun jf/org-setup-safe-elisp-links ()
    (setq org-confirm-elisp-link-whitelist
  	'("(khalel-edit-calendar-event)"
  	  "(progn (khalel-run-vdirsyncer) (khalel-import-events))"
  	  "(org-roam-dailies-goto-yesterday)"
  	  "(mu4e)"
  	  "(org-agenda-list)"))

    (setq org-confirm-elisp-link-not-regexp
  	(mapconcat 'identity org-confirm-elisp-link-whitelist "\\|")))
#+end_src

*** Org capture templates

#+begin_src emacs-lisp
  (defun jf/org-setup-capture-templates ()
    (setq org-capture-templates
  	'(
    	  ("t" "Todo" entry (file "~/org/inbox.org")
             "* TODO %?\n  %i")
    	  ("m" "Todo from Mail" entry (file "~/org/inbox.org")
             "* TODO %?\nSCHEDULED: %t\nMail from %:fromname: %a")
    	  ("l" "Todo with Link" entry (file "~/org/inbox.org")
             "* TODO %?\nSCHEDULED: %t\nLink: %a"))))
#+end_src

*** LaTeX export classes + beamer support

#+begin_src emacs-lisp
  (defun jf/org-setup-latex-export ()
    ;; use luatex as LaTeX Compiler
    (setq org-latex-compiler "lualatex")

    ;; Include e set (or known email address)
    (setq org-export-with-email t)

    ;; compile latex in foreground to directly retrieve compilation errors
    (setq org-export-in-background nil)

    ;; use emacs's font-locking for syntax highlighting in LaTeX exports
    (setq org-latex-src-block-backend 'engraved)

    ;; ox-latex: Add KomaScript to the known classes
    (with-eval-after-load 'ox-latex
      (add-to-list 'org-latex-classes '("scrbook"
                                	      "\\documentclass[11pt]{scrbook}"
                                	      ("\\chapter{%s}" . "\\chapter*{%s}")
                                	      ("\\section{%s}" . "\\section*{%s}")
                                	      ("\\subsection{%s}" . "\\subsection*{%s}")
                                	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    (with-eval-after-load 'ox-latex
      (add-to-list 'org-latex-classes '("scrartcl"
                                	      "\\documentclass[11pt]{scrartcl}"
                                	      ("\\section{%s}" . "\\section*{%s}")
                                	      ("\\subsection{%s}" . "\\subsection*{%s}")
                                	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    (with-eval-after-load 'ox-latex
      (add-to-list 'org-latex-classes '("moderncv"
                                	      "\\documentclass{moderncv}"
                                	      ("\\section{%s}" . "\\section*{%s}")
        				      ("\\subsection{%s}" . "\\subsection{%s}"))))

    ;; beamer export setup
    (add-to-list 'org-export-backends 'beamer)
    (setq org-beamer-environments-extra
  	'(("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}")))

    ;; koma-letter
    (eval-after-load 'ox '(require 'ox-koma-letter))
    (eval-after-load 'ox-koma-letter
      '(progn
         (add-to-list 'org-latex-classes
                      '("my-koma-letter"
        		      "\\documentclass[11pt,parskip,DIV=15,fromalign=right]\{scrlttr2\}
        \\usepackage[german]{babel}
        \\renewcommand{\\familydefault}{\\sfdefault}
               \[DEFAULT-PACKAGES]
               \[PACKAGES]
               \[EXTRA]"))

         (setq org-koma-letter-default-class "my-koma-letter"))))
#+end_src

*** Org babel
#+begin_src emacs-lisp
  (defun jf/org-setup-babel ()
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((dot . t)
       (emacs-lisp .t)
       (java .t)
       (plantuml .t)
       (shell . t)
       (sqlite . t)
       (latex . t))))
#+end_src

*** Display PDF images inline

#+begin_src emacs-lisp
  (defun jf/org-setup-display-pdf-inline ()

    ;; Display PDF files inline
    ;; taken from https://stackoverflow.com/questions/15407485/inline-pdf-images-in-org-mode

    (add-to-list 'image-file-name-extensions "pdf")

    (setq org-image-actual-width 600)

    (setq org-imagemagick-display-command "convert -density 600 \"%s\" -thumbnail \"%sx%s>\" \"%s\"")
    (defun org-display-inline-images (&optional include-linked refresh beg end)
      "Display inline images.
    Normally only links without a description part are inlined, because this
    is how it will work for export.  When INCLUDE-LINKED is set, also links
    with a description part will be inlined.  This
    can be nice for a quick
    look at those images, but it does not reflect what exported files will look
    like.
    When REFRESH is set, refresh existing images between BEG and END.
    This will create new image displays only if necessary.
    BEG and END default to the buffer boundaries."
      (interactive "P")
      (unless refresh
        (org-remove-inline-images)
        (if (fboundp 'clear-image-cache) (clear-image-cache)))
      (save-excursion
        (save-restriction
  	(widen)
  	(setq beg (or beg (point-min)) end (or end (point-max)))
  	(goto-char beg)
  	(let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                            (substring (org-image-file-name-regexp) 0 -2)
                            "\\)\\]" (if include-linked "" "\\]")))
                old file ov img)
            (while (re-search-forward re end t)
              (setq old (get-char-property-and-overlay (match-beginning 1)
                                                       'org-image-overlay)
    		  file (expand-file-name
  			(concat (or (match-string 3) "") (match-string 4))))
              (when (file-exists-p file)
                (let ((file-thumb (format "%s%s_thumb.png" (file-name-directory file) (file-name-base file))))
  		(if (file-exists-p file-thumb)
                      (let ((thumb-time (nth 5 (file-attributes file-thumb 'string)))
                            (file-time (nth 5 (file-attributes file 'string))))
                        (if (time-less-p thumb-time file-time)
    			  (shell-command (format org-imagemagick-display-command
    						 file org-image-actual-width org-image-actual-width file-thumb) nil nil)))
                    (shell-command (format org-imagemagick-display-command
  					 file org-image-actual-width org-image-actual-width file-thumb) nil nil))
  		(if (and (car-safe old) refresh)
                      (image-refresh (overlay-get (cdr old) 'display))
                    (setq img (save-match-data (create-image file-thumb)))
                    (when img
                      (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                      (overlay-put ov 'display img)
                      (overlay-put ov 'face 'default)
                      (overlay-put ov 'org-image-overlay t)
                      (overlay-put ov 'modification-hooks
  				 (list 'org-display-inline-remove-overlay))
                      (push ov org-inline-image-overlays)))))))))))
#+end_src

*** Finally setup org
#+begin_src emacs-lisp
  (use-package org
    :ensure nil ; already loaded, otherwise this won't get tangled
    ;; the bind may defer the package loading, see documentation (C-h f use-package RET)
    :bind (:map org-mode-map
              ("C-c C-<left>" . org-promote-subtree)
              ("C-c C-<right>" . org-demote-subtree)
              ("C-c ," . org-timestamp-inactive))
    :config
    (jf/org-setup-look-and-feel)
    (jf/org-setup-task-management-and-agenda)
    (jf/org-setup-safe-elisp-links)
    (jf/org-setup-capture-templates)
    (jf/org-setup-latex-export)
    (jf/org-setup-babel)
    (jf/org-setup-display-pdf-inline))
#+end_src

** Org mode exports: syntax highlighting with engrave-faces

For syntax highlighted source code blocks, I use the font-locking mode of emacs. The package engrave-faces contains LaTeX, Ansi and HTML faces.

#+begin_src emacs-lisp
  (use-package engrave-faces)
#+end_src

** Org mode scratch buffer

#+begin_src emacs-lisp
  (setq initial-scratch-message "* Org Mode Scratch Buffer\n\n")
  (setq initial-major-mode 'org-mode)
#+end_src

** org-roam
Build a second brain with org-roam.
#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n g" . org-roam-graph)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-date)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (setq org-roam-database-connector 'sqlite-builtin) ;; emacs 29 and newer
    (setq org-roam-directory (file-truename "~/org/roam/"))
    (setq org-roam-completion-everywhere t)
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (org-roam-setup)
    (org-roam-update-org-id-locations)
    (setq org-roam-capture-templates '(
                                       ("d" "default" plain "%?"
                                        :target (file+head
                                                 "%<%Y%m%d%H%M%S>-${slug}.org"
                                                 "#+title: ${title}\n")
                                        :unnarrowed t)
                                       ("n" "literature note" plain "%?"
                                        :target (file+head
                                                 "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
                                                 "#+title: [${citar-citekey}] ${note-title}\n#+filetags: literature_note\n\n")
                                        :unnarrowed t))) ; org-roam-capture-templates
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (setq org-roam-dailies-capture-templates '(
                                               ("d" "default" entry "* %?"
                                                :target
                                                (file+head "%<%Y-%m-%d_%A>.org" "#+title: %<%Y-%m-%d (%A)>\n#+filetags: daily\n\n- Links: [[id:b3cb74b2-a385-4132-a55e-8cf561eed9fc][Journaling]]\n* Träume\n* Daily Planing\n- [ ] Journal [[elisp:(org-roam-dailies-goto-yesterday 1)][yesterday]]\n- [ ] Process [[file:~/Syncthing/org/inbox.org][inbox]]\n- [ ] Check [[elisp:(mu4e)][mails]]\n- [ ] Check [[elisp:(org-agenda-list)][agenda]]\n* Emotionen\n** Drei Dinge, für die ich dankbar bin\n1. \n2. \n3. ")))) ; org-roam-dailies-capture-template
    ) ; org-roam
#+end_src

Visualize the org roam graph in browser.
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
  	org-roam-ui-follow t
  	org-roam-ui-update-on-save t
  	org-roam-ui-open-on-start t))
#+end_src

** ox-hugo

#+begin_src emacs-lisp
  (use-package ox-hugo)
#+end_src

** HTML Export

htmlize is used by org to export to HTML.
  
#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

** org-super-agenda

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :config
    (setq org-super-agenda-groups
  	'(;; Each group has an implicit boolean OR operator between its selectors.
   	  (:name ""  ; Optionally specify section name
                   :time-grid t)  ; Items that appear on the time grid
  	  (:name "Direct Actions"
  		 :tag ("direct"))
  	  (:name "Work"
                   :tag ("work" "teaching"))
  	  (:name "Promotion"
                   :tag "promotion")
  	  (:name "Projects"
  		 :tag ("projects"))
  	  (:name "Reading"
                   :category "reading")
  	  (:name "Personal"
                   :tag ("personal"))
  	  (:name "House Routines"
                   :tag "house")
  	  (:name "Sailing"
                   :tag "sail")
  	  ;; Groups supply their own section names when none are given
  	  (:todo "WAIT" :order 8)  ; Set order of this section
  	  ;; After the last group, the agenda will display items that didn't
  	  ;; match any of these groups, with the default order position of 99
  	  ))
    (org-super-agenda-mode))
#+end_src

** ox-extra (from org-contrib)

This is needed to allow for not exporting to latex those org headings that are tagged :ignore:.

#+begin_src emacs-lisp
  (use-package ox-extra :ensure org-contrib
    :after org
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+end_src

** org-pomodoro

#+begin_src emacs-lisp
  (use-package org-pomodoro
    :config
    (setq org-pomodoro-audio-player "/run/current-system/profile/bin/paplay")
    (setq org-pomodoro-start-sound "~/.local/share/sounds/Schachtglocke/4+3wav")
    (setq org-pomodoro-finished-sound "~/.local/share/sounds/Schachtglocke/1.wav")
    (setq org-pomodoro-overtime-sound "~/.local/share/sounds/Schachtglocke/1.wav")
    (setq org-pomodoro-short-break-sound "~/.local/share/sounds/Schachtglocke/4+2.wav")
    (setq org-pomodoro-long-break-sound "~/.local/share/sounds/Schachtglocke/4+1+2.wav")
    ;; (org-pomodoro-play-sound :start)
    ;; (org-pomodoro-play-sound :pomodoro)
    ;; (org-pomodoro-play-sound :overtime)
    ;; (org-pomodoro-play-sound :long-break)
    ;; (org-pomodoro-play-sound :short-break)
    ;; (org-pomodoro-play-sound :killed)
    ;; (org-pomodoro-play-sound :tick)
    (setq org-pomodoro-manual-break t)
    (setq org-pomodoro-keep-killed-pomodoro-time t)
    (setq org-pomodoro-clock-break t)
    (defun jf/org-pomodoro-waybar-string (text tooltip class)
      (format
       "{\"text\": \"%s\", \"tooltip\": \"%s\", \"class\": \"%s\" }"
       text tooltip class))
    (defun jf/org-pomodoro-waybar-shortened-clock-heading ()
      (substring-no-properties
       org-clock-heading
       0
       (min (length org-clock-heading) 19)))
    (defun jf/org-pomodoro-text-time ()
      "Return status info about org-pomodoro and if org-pomodoro is not running, try to print info about org-clock.
     If either org-pomodoro or org-clock aren't active, print \"No Active Task \" "
      (interactive)
      (cond ((equal :none org-pomodoro-state)
             (if (org-clock-is-active)
                 (format "Clocked task: %d minutes - %s"
                         (org-clock-get-clocked-time)
  		       (jf/org-pomodoro-waybar-shortened-clock-heading)
                         "No Active task")
  	     (jf/org-pomodoro-waybar-string
  	      nil
  	      nil
  	      nil)))
  	  ((equal :pomodoro org-pomodoro-state)
  	   (jf/org-pomodoro-waybar-string (format "%s • %s (%d)"
  						  (jf/org-pomodoro-waybar-shortened-clock-heading)
  						  (org-pomodoro-format-seconds)
  						  org-pomodoro-count)
  					  (jf/org-pomodoro-waybar-shortened-clock-heading)
  					  "work"))
  	  ((equal :overtime org-pomodoro-state)
  	   (jf/org-pomodoro-waybar-string (format "Overtime • %s (%d)"
  						  (org-pomodoro-format-seconds)
  						  org-pomodoro-count)
  					  (jf/org-pomodoro-waybar-shortened-clock-heading)
  					  "overtime"))
  	  ((equal :short-break org-pomodoro-state)
  	   (jf/org-pomodoro-waybar-string (format "Short Break • %s (%d)"
  						  (org-pomodoro-format-seconds)
  						  org-pomodoro-count)
  					  (jf/org-pomodoro-waybar-shortened-clock-heading)
  					  "short-break"))
  	  ((equal :long-break org-pomodoro-state)
  	   (jf/org-pomodoro-waybar-string (format "Long Break • %s"  
  						  (org-pomodoro-format-seconds))
  					  (jf/org-pomodoro-waybar-shortened-clock-heading)
  					  "long-break")))))
#+end_src

* Other major modes
** Transient
#+begin_src emacs-lisp
  (use-package transient
    :config
    (transient-define-prefix jf/my-menu ()
      "Mein benutzerdefiniertes Menü."
      ["Tools\n"
       ["Vterm" ("v" "vterm" vterm)]
       ["Org"
        ("a" "Agenda" org-agenda-list)
        ("d" "Deadlines" (lambda () (interactive) (org-agenda nil "d")))
        ("p" "Start/Stop Pomodoro" (lambda () (interactive) (org-pomodoro)))
        ("t" "GTD buffer" (lambda () (interactive) (find-file "~/org/gtd.org")))]
       ["Mail"
        ("m" "mu4e" mu4e)
        ("n" "Compose" mu4e-compose-mail)
        ("s" "Sync all" (lambda() (interactive) (shell-command "mbsync -a" nil nil)))]
       ["Writing"
        ("c" "Citar" citar-open)
        ("b" "Biblio" biblio-lookup)]
       ["Projects"
        ("g" "Magit" magit-status)]
       ["AI"
        ("i" "gptel" gptel)
        ("C-i" "gptel menu" gptel-menu)]
       ])
    )
#+end_src

** magit: Git support

#+begin_src emacs-lisp
  (use-package magit
    :config
    ;; gpg signing is at transient level 5, default was to show up to level 4
    (setq transient-default-level 5)
    (setq magit-diff-refine-hunk 'all)
    (with-eval-after-load 'project
      (define-key project-prefix-map "m" #'magit-project-status)
      (add-to-list 'project-switch-commands '(magit-project-status "Magit") t)))
#+end_src

** pdf-tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure nil ;; use the system installed version (elpaca keyword)
    :config
    (require 'pdf-occur) ;; if I don't require pdf-occur before pdf-tools-install, I get a warning at startup
    (pdf-tools-install)
    (define-key pdf-view-mode-map (kbd "s a") 'pdf-view-auto-slice-minor-mode)
        (setq-default pdf-view-display-size 'fit-page))
#+end_src

** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :ensure nil
    :config
    (setq vterm-max-scrollback 100000))
#+end_src

** Biblio
Search for literature in literature databases like arxiv and dblp
#+begin_src emacs-lisp
  (use-package biblio)
#+end_src

** AucTeX
- https://github.com/progfolio/elpaca/issues/245
- https://github.com/progfolio/elpaca/wiki/auctex

#+begin_src emacs-lisp
  (use-package tex
    :ensure
    (auctex :repo "https://git.savannah.gnu.org/git/auctex.git" :branch "main"
  	  :pre-build (("make" "elpa"))
  	  :build (:not elpaca--compile-info) ;; Make will take care of this step
  	  :files ("*.el" "doc/*.info*" "etc" "images" "latex" "style")
  	  :version (lambda (_) (require 'tex-site) AUCTeX-version))
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-engine 'luatex)
    ;; synctex
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    ;; pdf tools
    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
    (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))))
#+end_src

** JustFile mode

Two modes:
- just-mode to edit justfiles
- justl.el to run just on justfiles

#+begin_src emacs-lisp
  (use-package just-mode)
  (use-package justl)
#+end_src

** web-mode & php-mode

#+begin_src emacs-lisp
  (use-package web-mode)
  (use-package php-mode)
#+end_src

** markdown-mode

#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

** yaml-mode

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** plantuml-mode

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :config
    (setq org-plantuml-jar-path "~/Applications/plantuml.jar")
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-output-type "svg"))
#+end_src

** nov.el (eBook Reader)
#+begin_src emacs-lisp
  (use-package nov)
#+end_src

** COMMENT Platform.io
CLOSED: [2024-04-30 Tue 22:41]
Currently not in use, but pulls projectile as dependency. Therefore, I deactivated it
#+begin_src emacs-lisp
  ;; (use-package platformio-mode)
#+end_src

** GUIX

#+begin_src emacs-lisp
  (use-package guix)
  (use-package geiser)
  (use-package geiser-guile
    :config
    ;; Angenommen das Guix-Checkout ist in ~/git/guix.
    (with-eval-after-load 'geiser-guile
      (add-to-list 'geiser-guile-load-path "~/git/guix/master"))
    (with-eval-after-load 'geiser-guile
      (add-to-list 'geiser-guile-load-path "~/git/nonguix"))
    (with-eval-after-load 'yasnippet
      (add-to-list 'yas-snippet-dirs "~/git/guix/master/etc/snippets/yas"))
    (load-file "~/git/guix/master/etc/copyright.el"))
#+end_src

** gptel

#+begin_src emacs-lisp
  (use-package gptel
    :config
    (setq gptel-default-mode 'org-mode)
    (gptel-make-gemini "Gemini"
      :stream t
      :key (auth-info-password
            (nth 0 (auth-source-search
                    :host "generativelanguage.googleapis.com"))))
    (gptel-make-anthropic "Claude"
      :stream t
      :key (auth-info-password
            (nth 0 (auth-source-search
                    :host "anthropic.com"))))
    (add-to-list 'gptel-directives
                 '(dreams . "I want you to act as a dream interpreter. I will give you descriptions of my dreams, and you will provide interpretations based on the symbols and themes present in the dream. Do not provide personal opinions or assumptions about the dreamer. Provide only factual interpretations based on the information given. Provide your interpretation in German language.")))
#+end_src

#+begin_src emacs-lisp
  (use-package posframe)
  (use-package gptel-quick
    :after gptel postframe
    :ensure (gptel-quick
  	   :type git
  	   :host github
  	   :repo "karthink/gptel-quick")
    :config
    (setq gptel-quick-display 'postframe)
    ;(keymap-set embark-general-map "?" #'gptel-quick)
    )
#+end_src

** COMMENT ChatGPT Shell

Store the API key in .authinfo. ChatGPT and Dall-E use the same API key.

#+begin_src emacs-lisp :tangle no
  (use-package chatgpt-shell
   :after shell-maker
   :config (setq chatgpt-shell-openai-key
  	       (auth-source-pick-first-password
  				 :host "api.openai.com")))
#+end_src

** cypher mode

- Keywords from https://neo4j.com/docs/cypher-manual/current/syntax/keywords/
#+begin_src emacs-lisp
  (use-package cypher-mode
    :config
    (setq cypher-keywords
  	(regexp-opt '("ACCESS" "ACTIVE" "ADMIN" "ADMINISTRATOR" "ALIAS" "ALIASES" "ALL" "ALL_SHORTEST_PATHS" "ALTER" "AND" "ANY" "ARRAY" "AS" "ASC" "ASCENDING" "ASSIGN" "AT" "AUTH" "BINDINGS" "BOOL" "BOOLEAN" "BOOSTED" "BOTH" "BREAK" "BUILT" "BY" "CALL" "CASCADE" "CASE" "CHANGE" "CIDR" "COLLECT" "COMMAND" "COMMANDS" "COMPOSITE" "CONCURRENT" "CONSTRAINT" "CONSTRAINTS" "CONTAINS" "CONTINUE" "COPY" "COUNT" "CREATE" "CSV" "CURRENT" "DATA" "DATABASE" "DATABASES" "DATE" "DATETIME" "DBMS" "DEALLOCATE" "DEFAULT" "DEFINED" "DELETE" "DENY" "DESC" "DESCENDING" "DESTROY" "DETACH" "DIFFERENT" "DISTINCT" "DRIVER" "DROP" "DRYRUN" "DUMP" "DURATION" "EACH" "EDGE" "ELEMENT" "ELEMENTS" "ELSE" "ENABLE" "ENCRYPTED" "END" "ENDS" "ERROR" "EXECUTABLE" "EXECUTE" "EXIST" "EXISTENCE" "EXISTS" "FAIL" "FALSE" "FIELDTERMINATOR" "FINISH" "FLOAT" "FOR" "FOREACH" "FROM" "FULLTEXT" "FUNCTION" "FUNCTIONS" "GRANT" "GRAPH" "GRAPHS" "GROUP" "GROUPS" "HEADERS" "HOME" "ID" "IF" "IMMUTABLE" "IMPERSONATE" "IN" "INDEX" "INDEXES" "INF" "INFINITY" "INSERT" "INT" "INTEGER" "IS" "JOIN" "KEY" "LABEL" "LABELS" "LEADING" "LIMITROWS" "LIST" "LOAD" "LOCAL" "LOOKUP" "MANAGEMENT" "MAP" "MATCH" "MERGE" "NAME" "NAMES" "NAN" "NEW" "NFC" "NFD" "NFKC" "NFKD" "NODE" "NODES" "NODETACH" "NONE" "NORMALIZE" "NORMALIZED" "NOT" "NOTHING" "NOWAIT" "NULL" "OF" "OFFSET" "ON" "ONLY" "OPTION" "OPTIONAL" "OPTIONS" "OR" "ORDER" "PASSWORD" "PASSWORDS" "PATH" "PATHS" "PLAINTEXT" "POINT" "POPULATED" "PRIMARIES" "PRIMARY" "PRIVILEGE" "PRIVILEGES" "PROCEDURE" "PROCEDURES" "PROPERTIES" "PROPERTY" "PROVIDER" "PROVIDERS" "RANGE" "READ" "REALLOCATE" "REDUCE" "REL" "RELATIONSHIP" "RELATIONSHIPS" "REMOVE" "RENAME" "REPEATABLE" "REPLACE" "REPORT" "REQUIRE" "REQUIRED" "RESTRICT" "RETURN" "REVOKE" "ROLE" "ROLES" "ROW" "ROWS" "SCAN" "SEC" "SECOND" "SECONDARIES" "SECONDARY" "SECONDS" "SEEK" "SERVER" "SERVERS" "SET" "SETTING" "SETTINGS" "SHORTEST" "SHORTEST_PATH" "SHOW" "SIGNED" "SINGLE" "SKIPROWS" "START" "STARTS" "STATUS" "STOP" "STRING" "SUPPORTED" "SUSPENDED" "TARGET" "TERMINATE" "TEXT" "THEN" "TIME" "TIMESTAMP" "TIMEZONE" "TO" "TOPOLOGY" "TRAILING" "TRANSACTION" "TRANSACTIONS" "TRAVERSE" "TRIM" "TRUE" "TYPE" "TYPED" "TYPES" "UNION" "UNIQUE" "UNIQUENESS" "UNWIND" "URL" "USE" "USER" "USERS" "USING" "VALUE" "VARCHAR" "VECTOR" "VERTEX" "WAIT" "WHEN" "WHERE" "WITH" "WITHOUT" "WRITE" "XOR" "YIELD" "ZONE" "ZONED"))))
#+end_src

** ement.el

#+begin_src emacs-lisp
  (use-package ement)
#+end_src

** COMMENT JAVA LSP

#+begin_src emacs-lisp :tangle no
  ;;  (use-package projectile)
  ;;  (use-package flycheck)
  ;;  (use-package yasnippet :config (yas-global-mode))
  (use-package lsp-mode :hook ((lsp-mode . lsp-enable-which-key-integration)))
  (use-package hydra)
  ;;  (use-package company)
  (use-package lsp-ui)
  ;; (use-package which-key :config (which-key-mode))
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
  ;; (use-package dap-java :ensure nil)
  ;; (use-package helm-lsp)
  ;; (use-package helm
  ;; :config (helm-mode))
  (use-package lsp-treemacs)
#+end_src

** eglot Java
The built-in LSP server

#+begin_src emacs-lisp
  (add-hook 'java-mode-hook 'eglot-java-mode)
  (add-hook 'eglot-java-mode-hook (lambda ()                                        
    (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
    (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
    (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
    (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
    (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
    (define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh)))
#+end_src

* Minor modes & common packages
** savehist
Persist history over Emacs restarts. E.g. Vertico sorts by history position.
#+begin_src emacs-lisp
  (use-package emacs :ensure nil
    :config
    (savehist-mode 1))
#+end_src

** Vertico
(Vertical) Completion framework: Vertico is the successor of selectrum.
#+begin_src emacs-lisp
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))

  (use-package vertico
    :config
    ;; Different scroll margin
    ;;(setq vertico-scroll-margin 0)
    ;; Show more candidates
    (setq vertico-count 15)
    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)

    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)

    (vertico-mode))
#+end_src

** Orderless
This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order. [[https://github.com/oantolin/orderless]]
#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Consult
Completion allows you to quickly select an item from a list of candidates.

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
  	 ("C-c M-x" . consult-mode-command)
  	 ("C-c h" . consult-history)
  	 ("C-c k" . consult-kmacro)
  	 ;; ("C-c m" . consult-man) ; I use it for mu4e / my transient menu
  	 ("C-c i" . consult-info)
  	 ([remap Info-search] . consult-info)
  	 ;; C-x bindings (ctl-x-map)
  	 ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
  	 ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
  	 ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  	 ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
  	 ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
  	 ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
  	 ;; Custom M-# bindings for fast register access
  	 ("M-#" . consult-register-load)
  	 ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
  	 ("C-M-#" . consult-register)
  	 ;; Other custom bindings
  	 ("M-y" . consult-yank-pop)                ;; orig. yank-pop
  	 ;; M-g bindings (goto-map)
  	 ("M-g e" . consult-compile-error)
  	 ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
  	 ("M-g g" . consult-goto-line)             ;; orig. goto-line
  	 ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
  	 ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
  	 ("M-g m" . consult-mark)
  	 ("M-g k" . consult-global-mark)
  	 ("M-g i" . consult-imenu)
  	 ("M-g I" . consult-imenu-multi)
  	 ;; M-s bindings (search-map)
  	 ("M-s d" . consult-find)
  	 ("M-s D" . consult-locate)
  	 ("M-s g" . consult-grep)
  	 ("M-s G" . consult-git-grep)
  	 ("M-s r" . consult-ripgrep)
  	 ("M-s l" . consult-line)
  	 ("M-s L" . consult-line-multi)
  	 ("M-s k" . consult-keep-lines)
  	 ("M-s u" . consult-focus-lines)
  	 ;; Isearch integration
  	 ("M-s e" . consult-isearch-history)
  	 :map isearch-mode-map
  	 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
  	 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
  	 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
  	 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
  	 ;; Minibuffer history
  	 :map minibuffer-local-map
  	 ("M-s" . consult-history)                 ;; orig. next-matching-history-element
  	 ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
  	register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
  	xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    (setq consult-project-function #'consult--default-project-function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;;(setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src

** Marginalia

Enriches selection lists (and completion minibuffers, e.g. consult) with additional information.

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    ;; The :init configuration is always executed (Not lazy!)
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

** Corfu (Company replacement)

#+begin_src emacs-lisp
  (use-package corfu
    :config
    ;; Optional customizations
    ;; (setq corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (setq corfu-auto t)                 ;; Enable auto completion
    ;; (setq corfu-separator ?\s)          ;; Orderless field separator
    ;; (setq corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (setq corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (setq corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (setq corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (setq corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (setq corfu-scroll-margin 5)        ;; Use scroll margin
    (setq corfu-auto-delay 0.5)
    
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)
    
    ;; Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    (global-corfu-mode))
#+end_src

** Syntax check with flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (setq flycheck-emacs-lisp-load-path 'inherit)
    (add-hook 'elpaca-after-init-hook #'global-flycheck-mode)
    (add-hook 'prog-mode-hook 'flycheck-mode))
#+end_src
 
** Spell check with flyspell (using enchant)

enchant uses aspell or hunspell or whatever it can find. ~enchant-lsmod-2~ tells, what enchant-2 can find. Saved words are stored in ~~./config/enchant~.

#+begin_src emacs-lisp
  (use-package emacs :ensure nil
    :config
    (setq ispell-program-name "enchant-2")
    (ispell-change-dictionary "de_DE")
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+end_src

** embark & embark-consult
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** citar & citar-embark & citar-org-roam

Allows to browse bibtex file(s), insert citations, open files, links and notes. It's a helm-bibtext replacement.
#+begin_src emacs-lisp
  (use-package citar
    :no-require
    :after org
    :bind
    (:map minibuffer-local-map ("M-b" . citar-insert-preset))
    (:map org-mode-map :package org ("C-c b" . #'org-cite-insert))
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup)
    :config
    (setq org-cite-global-bibliography '("~/Documents/Literatur/Literatur.bib"))
    (setq org-cite-insert-processor 'citar)
    (setq org-cite-follow-processor 'citar)
    (setq org-cite-activate-processor 'citar)
    ;; (setq org-cite-export-processors '((latex biblatex) (t basic)))
    (setq citar-bibliography org-cite-global-bibliography)
    (setq citar-library-paths '("~/Documents/Literatur/bibtex-pdfs"))
    (setq citar-at-point-function 'embark-act))
#+end_src

Embark integration is provided by /citar-embark/. Press C-. (or RET in org buffers) on any citation key to see possible actions.
#+begin_src emacs-lisp
  (use-package citar-embark
    :after citar embark
    :no-require
    :config
    (citar-embark-mode))
#+end_src

The package /citar-org-roam/ provides usage of org roam to take bibliographical notes. When enabled, the "old" or "usual" notes in my notes directory are not available anymore.
#+begin_src emacs-lisp
  (use-package citar-org-roam
    :after (citar org-roam)
    :config
    (setq citar-org-roam-capture-template-key "n")
    (setq citar-org-roam-subdir "bib")
    (citar-org-roam-mode))
#+end_src

** yasnippets (snippet expansion)
Snippet expansion
- default key for expansion is <TAB>
- company does not show snippets for completion-at-point, but there is ongoing work
  what about corfu?

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode))
#+end_src

Snippets aren't included in the base package. Therefore, they need to be loaded separately.
#+begin_src emacs-lisp
  (use-package yasnippet-snippets)
#+end_src

** which-key
This helps to figure out the next keystrokes
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-idle-delay 1)
    (which-key-mode))
#+end_src

** undo-tree
The package /undo-tree/ contains more features than vundo, e.g. timestamps, diffs, etc. I never used those features.
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src
The global keybinding 'C-x u' is set below.

** Agressive Indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :config
    (aggressive-indent-global-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'scheme-mode))
#+end_src

** editorconfig

#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src

** openwith

#+begin_src emacs-lisp
  (use-package openwith
    :config
    (setq openwith-associations
  	(list
  	 (list (openwith-make-extension-regexp
  		'("mpg" "mpeg" "mp4" "flv" "mov" "m4v" "avi" "wmv" "mkv"
  		  "mp3" "wav" "ogm" "ogg"
  		  "doc" "xls" "ppt" "odt" "ods" "odg" "odp" "docx" "xlsx" "pptx"
  		  "asta"))
  	       "xdg-open"
  	       '(file))))
    ;; prevent <openwith> from interfering with mail attachments
    (require 'mm-util)
    (add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler)
    ;; enable openwith mode
    (openwith-mode 1))
#+end_src

** frames-only-mode

#+begin_src emacs-lisp
  (use-package frames-only-mode
    :config
    (frames-only-mode-remap-common-window-split-keybindings)
    (setq frames-only-mode-use-window-functions '(calendar report-emacs-bug checkdoc-show-diagnostics checkdoc org-compile-file corfu-popupinfo--show))
    (frames-only-mode))
#+end_src

** terminal-here
Opens a terminal in the directory that matches the active buffer. Even works over tramp (e.g. ssh).

#+begin_src emacs-lisp
  (use-package terminal-here
    :config
    (setq terminal-here-linux-terminal-command 'alacritty)
    (global-set-key (kbd "C-<f5>") #'terminal-here-launch)
    (global-set-key (kbd "C-<f6>") #'terminal-here-project-launch))
#+end_src

** COMMENT sway (needs shackle?)

#+begin_src emacs-lisp :tangle no
  (use-package sway
    :config
    (sway-socket-tracker-mode)
    (sway-undertaker-mode) ;; If you want to use :dedicate, read below.
    (sway-x-focus-through-sway-mode)) ;; Temporary workaround for Sway bug 6216)
#+end_src

* Some convenience functions

** Switch dictionary for flyspell
#+begin_src emacs-lisp
  (defun jf/switch-spell-dict-to-de ()
    (interactive)
    (ispell-change-dictionary "de_DE")
    (flyspell-buffer))

  (defun jf/switch-spell-dict-to-en ()
    (interactive)
    (ispell-change-dictionary "en_US")
    (flyspell-buffer))

  (defun jf/toggle-spell-dict ()
    (interactive)
    (if (equal ispell-local-dictionary "de_DE")
        (ispell-change-dictionary "en_US")
      (ispell-change-dictionary "de_DE")
      (flyspell-buffer)))    
#+end_src

** COMMENT Connect with my ZNC irc bouncer 
Not necessary anymore, since I have a IRC/matrix bridge now
#+begin_src emacs-lisp
  (defun jf/my-irc()
    "Connect to my znc irc bouncer."
    (interactive)
    (erc-tls :server "irc.nuthouse.de" :nick "nutcase"))
#+end_src

** A more distressless writing environment

#+begin_src emacs-lisp
  (defun jf/my-writing-mode()
    "Switch to my distress less writing mode. An alternative is \"writeroom-mode\""
    (interactive)
    (olivetti-mode)
    (variable-pitch-mode))
#+end_src

There is a package https://github.com/joostkremers/writeroom-mode?tab=readme-ov-file that does similar things.

** Focus on Subtree (clone + narrow)
#+begin_src emacs-lisp
  (defun jf/narrow-to-subtree-in-indirect-buffer ()
    "Create an indirect cloned buffer and narrow to org subtree in the clone."
    (interactive)
    (clone-indirect-buffer
     (concat "<org subtree> " (nth 4 (org-heading-components)))
     t)
    (org-narrow-to-subtree))
#+end_src

** TODO Synchronization between JabRef keywords and org-roam nodes
#+begin_src emacs-lisp :tangle no
  (use-package org-roam-citation-keyword-nodes
    :after roam citar
    :ensure (org-roam-citation-keyword-nodes
  	   :type git :host github
  	   :repo "nuthub/org-roam-citation-keyword-nodes"))
#+end_src

** Revert a buffer visiting a file that is optionally created
I use this to trigger a reload of my generated calendar file after it has been rewritten.
#+begin_src emacs-lisp
  (defun jf/revert-file-visiting-buffer (filename)
    "Reverts open buffer visiting FILENAME. If no buffer is visiting FILENAME, a buffer is created that visits FILENAME."
    (save-excursion
      (or (find-buffer-visiting filename)
  	(find-file filename))
      (set-buffer (find-buffer-visiting filename))
      (revert-buffer nil t)
      (message (concat filename " reverted"))))
#+end_src

** Open automounted drives
From https://mbork.pl/2024-02-17_Opening_external_drives_in_Dired
#+begin_src emacs-lisp
(defcustom jf/automount-directory (format "/media/%s" user-login-name)
  "Directory under which drives are automounted.")

(defun jf/automount-open-in-dired ()
  "Open the automounted drive in Dired.
If there is more than one, let the user choose."
  (interactive)
  (let ((dirs (directory-files jf/automount-directory nil "^[^.]")))
    (dired (file-name-concat
            jf/automount-directory 
            (cond ((null dirs)
                   (error "No drives mounted at the moment"))
                  ((= (length dirs) 1)
                   (car dirs))
                  (t
                   (completing-read "Open in dired: " dirs nil t)))))))
#+end_src

* Printing

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq lpr-command "gtklp")
    (setq ps-lpr-command "gtklp"))
#+end_src

* Calendar & Contact syncing

- I use *vdirsyncer* to synchronize all my remote Calendars and Contacts with my home folder
- I use *khal* to edit the ics files in my home folder (not really, but khal is installed now)
- *khalel* is a package that allows me to interact with khal from within emacs and to create a (read only :( ) ~calendar.org~ file for inclusion in my agenda.
- I use *khard* for editing vcards outside of Nextcloud
- *khardel*, analogously to *khalel*, allows me to edit contacts from within Emacs

#+begin_src emacs-lisp
  (use-package khalel
    :ensure t
    :after org
      :config
      ;; (setq khalel-khal-command "khal")
      ;; (setq khalel-vdirsyncer-command "vdirsyncer")
      (setq khalel-capture-key "k")
      (setq khalel-default-calendar "Persönlich")
      (setq khalel-import-org-file (concat org-directory "/" "calendar.org"))
      (setq khalel-import-start-date "-2m")
      (setq khalel-import-end-date "+12m")
      (setq khalel-import-org-file-confirm-overwrite nil)
      (setq khalel-import-format "* {title} {cancelled} :{calendar}:
  :PROPERTIES:
  :CALENDAR: {calendar}
  :CATEGORY: {calendar}
  :LOCATION: {location}
  :ID: {uid}
  :END:
  - When: <{start-date-long} {start-time}>--<{end-date-long} {end-time}>
  - Where: {location}
  - Description: {description}
  - URL: {url}
  - Organizer: {organizer}

  [[elisp:(khalel-edit-calendar-event)][Edit this event]]    [[elisp:(progn (khalel-run-vdirsyncer) (khalel-import-events))][Sync and update all]]
  ")
      (khalel-add-capture-template)
      (require 'khalel-icalendar))

  (use-package khardel
    :after org
    :config
    (require 'khardel)
    (require 'khardel-org))
#+end_src

* Contact syncing

* Mail configuration

mu (including mu4e) needs to be installed via package manager, e.g. yay mu-git

1. run mbsync -a
2. initialize mu
   #+begin_src bash :tanlge no
     mu init \
        --my-address=foo@example.com \
        --my-address=bar@example.com \
        -m ~/Mail
   #+end_src

#+begin_src emacs-lisp
  (use-package mu4e
    :if (string-prefix-p "nutbook" (system-name))
    :ensure nil ;; use the system installed version (elpaca keyword)
    :config
    (define-key mu4e-view-mode-map (kbd "C--") nil t) ; remove key binding
    (define-key mu4e-view-mode-map (kbd "C-+") nil t) ; remove key binding
    (define-key mu4e-headers-mode-map (kbd "C--") nil t) ; remove key binding
    (define-key mu4e-headers-mode-map (kbd "C-+") nil t) ; remove key binding
    (setq mu4e-read-option-use-builtin nil)
    (setq mu4e-completing-read-function 'completing-read)
    (setq mu4e-change-filenames-when-moving t)

    ;; appearance
    (setq mu4e-confirm-quit t)
    (setq mu4e-notification-support t)
    (setq mu4e-headers-time-format "%H:%M")
    (setq mu4e-headers-date-format "%F %H:%M")
    (setq mu4e-headers-fields
          '((:human-date . 18)
            (:flags . 6)
            (:from-or-to . 25)
            (:subject . 125)
            (:maildir . 15)
            (:mailing-list . 10)))
    (setq mu4e-use-fancy-chars t)
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses t)
    (setq gnus-visible-headers (concat gnus-visible-headers
                                       "\\|^User-Agent:"))

    ;; receiving mails
    (setq mu4e-get-mail-command "mbsync inboxes-only")
    (setq mu4e-update-interval(* 5 60))
    (setq mu4e-maildir "~/Mail")

    ;; headers view
    (setq mu4e-org-link-query-in-headers-mode t)
    (setq mu4e-headers-include-related nil)

    ;; Composing mails
    (require 'smtpmail)
    (setq smtpmail-queue-mail nil)  ;; start in direct mode
    (setq smtpmail-queue-dir "~/Mail/queue/cur")
    (setq mail-user-agent 'mu4e-user-agent)
    (setq message-send-mail-function 'smtpmail-send-it)
    (setq message-kill-buffer-on-exit t)
    ;; show only mail addresses of the last 365 days in completion buffer
    ;; (setq mu4e-compose-complete-only-after (format-time-string
    ;;                                     "%Y-%m-%d"
    ;;                                     (time-subtract (current-time) (days-to-time 365))))
    ;; this lets correctly reply to message where a recipient address contains
    ;; a comma, like in "Julian Flake (Softwaretechnik, Informatik) <flake@uni-koblenz.de>"
    (setq rfc2047-quote-decoded-words-containing-tspecials t)
    (setq mu4e-compose-format-flowed t)
    (setq mu4e-compose-in-new-frame t)
    (setq message-cite-function 'message-cite-original) ;; alternative: 'message-cite-original-without-signature
    ;; this adds the date of a cited mail:
    (setq message-citation-line-function 'message-insert-formatted-citation-line)
    ;; enable gnus dired mode, which allows to add multiple files a message buffer
    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
    ;; disable undo-tree for mail compose (why? I have a separate dir for )
    (add-hook 'mu4e-compose-mode-hook
              (lambda()
                (undo-tree-mode -1)))
    ;; gpg sign all mails when sending
    (add-hook 'message-send-hook
              (lambda()
                (mml-secure-sign)))

    ;; bookmarks and shortcuts
    (setq mu4e-bookmarks
          '((:name "Combined inbox" :query "maildir:/private/INBOX OR maildir:/work/INBOX OR maildir:/tudo/INBOX" :key ?i)
            (:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key ?u)
            (:name "Sent" :query "maildir:/private/Sent OR maildir:/work/Sent" :key ?s)
            (:name "Archives" :query "maildir:/private/Archives/2025 OR maildir:/work/Archives/2025" :key ?a)
            (:name "Drafts" :query "maildir:/private/Drafts OR maildir:/work/Drafts" :key ?d)
            (:name "Junk" :query "maildir:/private/Junk OR maildir:/work/Junk" :key ?j)
            (:name "Mailing-Lists" :query "maildir:/private/INBOX/*" :key ?m)
            (:name "Today's messages" :query "date:today..now" :key ?n)
            (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key ?7)
            (:name "Trashed mails" :query "flag:trashed" :hide-unread nil :key ?t)
            (:name "Messages with PDFs" :query "mime:application/pdf" :key ?p)))
    (setq mu4e-maildir-shortcuts
          '(("/private/INBOX" . ?p)
            ("/private/Archives/2025" . ?P)
            ("/private/autolearn/ham" . ?h)
            ("/private/autolearn/spam" . ?s)
            ("/work/INBOX" . ?w)
            ("/work/Archives/2025" . ?W)
            ("/tudo/INBOX" . ?d)))

    ;;
    ;; contexts
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-contexts
          (list
           ;; private account
           (make-mu4e-context
            :name "Private"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/private" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "julian@flake.de")
                    (user-full-name . "Julian Flake")
                    (message-signature . nil)
                    (smtpmail-smtp-server . "nuthost.de")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 587)
                    (mu4e-drafts-folder . "/private/Drafts")
                    (mu4e-sent-folder . "/private/Sent")
                    (mu4e-refile-folder  . "/private/Archives/2025")
                    (mu4e-trash-folder . "/private/Trash")))
           ;; work account
           (make-mu4e-context
            :name "Work"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/work" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "flake@uni-koblenz.de")
                    (user-full-name . "Julian Flake")
                    (message-signature . "Dipl.-Inf. Julian Flake\n\nUniversity of Koblenz\nFaculty 4: Computer Science\nInstitute for Software Technology\nPB 20 16 02 | D-56016 Koblenz | Germany\n\nVoice: +49 261 287 2787\nEmail: flake@uni-koblenz.de\nhttps://uni-ko.de/flake")
                    (smtpmail-smtp-server . "smtp.uni-koblenz.de")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-service . 465)
                    (mu4e-drafts-folder  . "/work/Drafts")
                    (mu4e-sent-folder  . "/work/Sent")
                    (mu4e-refile-folder  . "/work/Archives/2025")
                    (mu4e-trash-folder  . "/work/Trash")))
           ;; TUDo account
           (make-mu4e-context
            :name "TUDo"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/tudo" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "julian.flake@tu-dortmund.de")
                    (user-full-name . "Julian Flake")
                    (message-signature . nil)
                    (smtpmail-smtp-server . "unimail.tu-dortmund.de")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 587)
                    (mu4e-drafts-folder . "/private/Drafts")
                    (mu4e-sent-folder . "/private/Sent")
                    (mu4e-refile-folder  . "/private/Archives/2025")
                    (mu4e-trash-folder . "/private/Trash")))))

    ;; Calendar support
    (require 'mu4e-icalendar)

    ;; start mu4e (in background)
    (mu4e t)) ; end of use-package mu4e
#+end_src

When signing mails with openpgp (or gnupg), use the key associated with the sender address.
#+begin_src emacs-lisp
  (setq mml-secure-openpgp-sign-with-sender t)
#+end_src

Before sending an email, I'd like to check some things.
#+begin_src emacs-lisp
  ;; 1. let me confirm every message
  (setq message-confirm-send t)
  ;; 2. let me confirm/decline to send an email with empty subject
  (defun jf/message-warn-if-no-subject() 
    (or (message-field-value "Subject")
        (yes-or-no-p "Really send without Subject? ")
        (keyboard-quit)))
  (add-hook 'message-send-hook #'jf/message-warn-if-no-subject)
  ;; 3. warn if no attachment can be found, although there should be one.
  ;; this is from https://github.com/munen/emacs.d/?tab=readme-ov-file#check-for-supposed-attachments-prior-to-sending-them
  ;; I moved the functions in my own namespace and slightly modified them
  (defun jf/message-attachment-present-p ()
    "Return t if a non-gpg attachment is found in the current message."
    (save-excursion
      (save-restriction
        (widen)
        (goto-char (point-min))
        (when (search-forward "<#part type" nil t) t))))

  (setq jf/message-attachment-regexp
        ;; if lower case letters are used, the search is case insensitive
        (regexp-opt '("we send"
                      "i send"
                      "attach"
                      "angehängt"
                      "anhang")))

  (defun jf/message-warn-if-no-attachments ()
    "Check if there is an attachment in the message if I claim it."
    (when (and (save-excursion
                 (save-restriction
    		 (widen)
    		 (goto-char (point-min))
    		 (re-search-forward jf/message-attachment-regexp nil t)))
    	     (not (jf/message-attachment-present-p)))
      (unless (y-or-n-p "No attachment. Send the message?")
        (keyboard-quit))))

  (add-hook 'message-send-hook #'jf/message-warn-if-no-attachments)
#+end_src

* Guix fixes
** tramp / sftpd / gvfsd-fuse
On my Guix system, the process for ~gvfsd-fuse~ is running as ~.gvfsd-fuse-real~. Therefore, the function ~tramp-process-running-p~ does not detect the running process. A similar problem exists with flathub package of emacs: https://github.com/flathub/org.gnu.emacs/issues/27 . Adding the advice from the issue helps, although it could be more elegant.

#+begin_src emacs-lisp :tangle yes
  (defun tramp-process-running-p--mock (process-name)
    "gvfs* is always running."
    (when (string-match "gvfs.*" process-name)
      t))

  (advice-add 'tramp-process-running-p
  	    :before-until
  	    #'tramp-process-running-p--mock)
#+end_src

Best option would be to fix ~tramp-process-running-p~ upstream. An emacs lisp version of ~pidof~ or ~pgrep~ would make it easier.

* Global key bindings
** Increase / decrease text scale
#+begin_src emacs-lisp
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-+") 'text-scale-increase)
#+end_src
** Comment / Uncomment Region
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-,") 'comment-region)
  (global-set-key (kbd "C-x C-.") 'uncomment-region)
#+end_src
** Revert buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'revert-buffer)
#+end_src

** COMMENT Open the file under cursor
CLOSED: [2024-12-26 Thu 11:38]
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-x f") 'find-file-at-point)
#+end_src

** Switch dictionary
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c d") 'jf/toggle-spell-dict)
#+end_src

** undo-tree
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x u") 'undo-tree-visualize)
#+end_src

** Open GTD file
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c t") (lambda () (interactive) (find-file "~/org/gtd.org")))
#+end_src

** Org mode
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c o") 'org-switchb)
  (global-set-key (kbd "C-c n u") 'org-roam-ui-open)
  (global-set-key (kbd "C-c j") 'consult-org-heading)
#+end_src

** vterm

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c v") 'vterm)
#+end_src

** Magit
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c g") 'magit-status)
#+end_src

** Mu4e
#+begin_src emacs-lisp
  ;; in conflict with 'consult-man
  (global-set-key (kbd "C-c m") 'mu4e)
#+end_src

** gptel
#+begin_src emacs-lisp
  (define-key org-mode-map (kbd "C-c RET") nil)
  (global-set-key (kbd "C-c RET") 'gptel-send)
#+end_src

** citar-open in non org/latex buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c b") 'citar-open)
#+end_src
** Bind my transient menu
#+begin_src emacs-lisp
  (global-set-key (kbd "<f12>") 'jf/my-menu)
#+end_src

