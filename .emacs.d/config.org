#+TITLE: Emacs Configuration
#+STARTUP: overview
#+TODO: TODO CHECK SKIP

* Package management
Package management is done with straight.el now. The bootstrapping of this has been moved to my init.el since this allows to use straight.el to load org mode which is required for the literate configuration you see here. Otherwise emacs would use the built-in version of org which may be too old for the more bleeding edge character of a straight.el maintained emacs installation.
straight.el offers the 'use-package' command (see also init.el).

* Basic personal information
  
** This is used to identify myself, and to find my own GnuPG key
  
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Julian Flake")
(setq user-mail-address "julian@flake.de")
#+END_SRC

** My default browser is chromium:
  #+BEGIN_SRC emacs-lisp
    ;; (setq browse-url-browser-function 'browse-url-chromium)
    ;; (setq browse-url-browser-function 'browse-url-default-browser) ;; not necessary, it's the default
  #+END_SRC

** TODO Some localizations for the calendar

Holidays are not shown in agenda-hoidays (org-agenda 'h')

#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1
          calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                   "Donnerstag" "Freitag" "Samstag"]
          calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                     "Juni" "Juli" "August" "September"
                                     "Oktober" "November" "Dezember"])
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (setq solar-n-hemi-seasons
        '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "Neujahr")
          (holiday-fixed 5 1 "1. Mai")
          (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

  ;; Feiertage für Bayern, weitere auskommentiert
  (setq holiday-christian-holidays
        '((holiday-float 12 0 -4 "1. Advent" 24)
          (holiday-float 12 0 -3 "2. Advent" 24)
          (holiday-float 12 0 -2 "3. Advent" 24)
          (holiday-float 12 0 -1 "4. Advent" 24)
          (holiday-fixed 12 25 "1. Weihnachtstag")
          (holiday-fixed 12 26 "2. Weihnachtstag")
          (holiday-fixed 1 6 "Heilige Drei Könige")
          (holiday-easter-etc -48 "Rosenmontag")
          ;; (holiday-easter-etc -3 "Gründonnerstag")
          (holiday-easter-etc  -2 "Karfreitag")
          (holiday-easter-etc   0 "Ostersonntag")
          (holiday-easter-etc  +1 "Ostermontag")
          (holiday-easter-etc +39 "Christi Himmelfahrt")
          (holiday-easter-etc +49 "Pfingstsonntag")
          (holiday-easter-etc +50 "Pfingstmontag")
          (holiday-easter-etc +60 "Fronleichnam")
          (holiday-fixed 8 15 "Mariae Himmelfahrt")
          (holiday-fixed 11 1 "Allerheiligen")
          ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
          (holiday-float 11 0 1 "Totensonntag" 20)))
  #+END_SRC
* Start a Server

#+begin_src emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+end_src

* Some Functions

#+begin_src emacs-lisp

  (defun jf/start-zsh () (interactive)
    (ansi-term "zsh"))

#+end_src

* Look & Feel
** General appearance

#+BEGIN_SRC emacs-lisp

  (menu-bar-mode -1) ; switch off menu bar
  (tool-bar-mode -1) ; switch off tool bar
  (scroll-bar-mode -1) ; switch off scroll bar
  (column-number-mode t) ; show column number next to line number
  (global-hl-line-mode t) ; highlight the current line
  (setq visible-bell t)
  (setq inhibit-startup-screen t) ;; don't show splash

#+END_SRC

** Theme
*** zenburn
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config (load-theme 'zenburn t))
#+END_SRC

** Diminish

This is to hide minor modes from mode line. You can use `:diminish foo-mode` then in use-package(...)

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC
   
** Font

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Hack-12"))
#+END_SRC

** Line numbers on the left
   
Since Emacs 26 there is a builtin `display-line-numbers-mode`.

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode t)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  vterm-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** All-the-icons

You must run 'M-x all-the-icons-install-fonts' to actually download the icons to '~/.local/share/fonts/'.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

** A beautiful modeline

#+BEGIN_SRC emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC

** Smart paranthesis

An alternative to /smartparens/ is /paren/.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode t)
      (show-paren-mode t)))
#+END_SRC

* Minor modes & Common packages
** Prescient

Frecency based filtering and sorting of completion lists. An alternative to the orderless package. Additionally selectrum-presient needs to be loaded.

#+begin_src emacs-lisp
  (use-package prescient)
#+end_src

** Selectrum

Selectrum is an alternative to Vertico. It comes with its own filtering and sorting apporoach. But we stick to orderless for the moment.

#+begin_src emacs-lisp
  (use-package selectrum
    :config
    (selectrum-mode +1)
    (setq selectrum-cycle-movement t))

  (use-package selectrum-prescient
    :after selectrum prescient
    :config
    ;; to make sorting and filtering more intelligent
    (selectrum-prescient-mode +1)

    ;; to save your command history on disk, so the sorting gets more
    ;; intelligent over time
    (prescient-persist-mode +1))  
#+end_src
** Marginalia

Enriches selection lists with additional information.

#+BEGIN_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (;;("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
  #+END_src

** consult

Completion allows you to quickly select an item from a list of candidates.

#+BEGIN_SRC emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (
           ;; C-x bindings (ctl-x-map)
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)               ;; Alternative: consult-flymake
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")
  )

#+END_SRC
** embark & embark-consult
#+BEGIN_SRC emacs-lisp
  (use-package embark
     :ensure t

     :bind
     (("C-." . embark-act)         ;; pick some comfortable binding
      ("C-;" . embark-dwim)        ;; good alternative: M-.
      ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

     :init

     ;; Optionally replace the key help with a completing-read interface
     (setq prefix-help-command #'embark-prefix-help-command)

     :config

     ;; Hide the mode line of the Embark live/completions buffers
     (add-to-list 'display-buffer-alist
                  '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                    nil
                    (window-parameters (mode-line-format . none)))))

   ;; Consult users will also want the embark-consult package.
   (use-package embark-consult
     :ensure t
     :after (embark consult)
     :demand t ; only necessary if you have the hook below
     ;; if you want to have consult previews as you move around an
     ;; auto-updating embark collect buffer
     :hook
     (embark-collect-mode . consult-preview-at-point-mode))
  #+END_SRC

** citar & citar-embark

Allows to browse bibtex file(s), insert citations, open files, links and notes. It's a helm-bibtext replacement.

#+BEGIN_SRC emacs-lisp
  (use-package citar
    :bind (("C-c b" . citar-insert-citation)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    :config
    (setq citar-bibliography '("~/Dokumente/Literatur/Literatur.bib"))
    (setq citar-library-paths '("~/Dokumente/Literatur/bibtex-pdfs"))
    (setq citar-notes-paths '("~/Dokumente/Literatur/notes")))

  (use-package citar-embark
    :after citar embark
    :no-require
    :config
    (citar-embark-mode))
#+END_SRC

** yasnippets (snippet expansion)

Snippet expansion
- default key for expansion is <TAB>
- company does not show snippets for completion-at-point

 #+begin_src emacs-lisp

   (use-package yasnippet
     :config
     (yas-global-mode))

   ;; snippets
   (use-package yasnippet-snippets)
   
 #+end_src

** which-key

 This helps to figure out the next keystrokes

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+END_SRC

** undo-tree

The package /undo-tree/ contains more features than vundo, e.g. timestamps, diffs, etc. I never used those features.

#+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :diminish undo-tree-mode
     :config
     (global-undo-tree-mode))
#+END_SRC

The global keybinding 'C-x u' is set below.

** Agressive Indent

#+BEGIN_SRC emacs-lisp

  (use-package aggressive-indent
    :config (aggressive-indent-global-mode))
  
#+END_SRC

** Treemacs

#+begin_src emacs-lisp

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    ;; :config
    ;; (progn
    ;;   (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
    ;;         treemacs-deferred-git-apply-delay        0.5
    ;;         treemacs-directory-name-transformer      #'identity
    ;;         treemacs-display-in-side-window          t
    ;;         treemacs-eldoc-display                   'simple
    ;;         treemacs-file-event-delay                2000
    ;;         treemacs-file-extension-regex            treemacs-last-period-regex-value
    ;;         treemacs-file-follow-delay               0.2
    ;;         treemacs-file-name-transformer           #'identity
    ;;         treemacs-follow-after-init               t
    ;;         treemacs-expand-after-init               t
    ;;         treemacs-find-workspace-method           'find-for-file-or-pick-first
    ;;         treemacs-git-command-pipe                ""
    ;;         treemacs-goto-tag-strategy               'refetch-index
    ;;         treemacs-header-scroll-indicators        '(nil . "^^^^^^")
    ;;         treemacs-hide-dot-git-directory          t
    ;;         treemacs-indentation                     2
    ;;         treemacs-indentation-string              " "
    ;;         treemacs-is-never-other-window           nil
    ;;         treemacs-max-git-entries                 5000
    ;;         treemacs-missing-project-action          'ask
    ;;         treemacs-move-forward-on-expand          nil
    ;;         treemacs-no-png-images                   nil
    ;;         treemacs-no-delete-other-windows         t
    ;;         treemacs-project-follow-cleanup          nil
    ;;         treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
    ;;         treemacs-position                        'left
    ;;         treemacs-read-string-input               'from-child-frame
    ;;         treemacs-recenter-distance               0.1
    ;;         treemacs-recenter-after-file-follow      nil
    ;;         treemacs-recenter-after-tag-follow       nil
    ;;         treemacs-recenter-after-project-jump     'always
    ;;         treemacs-recenter-after-project-expand   'on-distance
    ;;         treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
    ;;         treemacs-show-cursor                     nil
    ;;         treemacs-show-hidden-files               t
    ;;         treemacs-silent-filewatch                nil
    ;;         treemacs-silent-refresh                  nil
    ;;         treemacs-sorting                         'alphabetic-asc
    ;;         treemacs-select-when-already-in-treemacs 'move-back
    ;;         treemacs-space-between-root-nodes        t
    ;;         treemacs-tag-follow-cleanup              t
    ;;         treemacs-tag-follow-delay                1.5
    ;;         treemacs-text-scale                      nil
    ;;         treemacs-user-mode-line-format           nil
    ;;         treemacs-user-header-line-format         nil
    ;;         treemacs-wide-toggle-width               70
    ;;         treemacs-width                           35
    ;;         treemacs-width-increment                 1
    ;;         treemacs-width-is-initially-locked       t
    ;;         treemacs-workspace-switch-cleanup        nil
    )

  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)

  ;; (treemacs-follow-mode t)
  ;; (treemacs-filewatch-mode t)
  ;; (treemacs-fringe-indicator-mode 'always)
  ;; (when treemacs-python-executable
  ;;   (treemacs-git-commit-diff-mode t))

  ;; (pcase (cons (not (null (executable-find "git")))
  ;;              (not (null treemacs-python-executable)))
  ;;   (`(t . t)
  ;;    (treemacs-git-mode 'deferred))
  ;;   (`(t . _)
  ;;    (treemacs-git-mode 'simple)))

  ;; (treemacs-hide-gitignored-files-mode nil))
  ;; :bind
  ;; (:map global-map
  ;;       ("M-0"       . treemacs-select-window)
  ;;       ("C-x t 1"   . treemacs-delete-other-windows)
  ;;       ("C-x t t"   . treemacs)
  ;;       ("C-x t d"   . treemacs-select-directory)
  ;;       ("C-x t B"   . treemacs-bookmark)
  ;;       ("C-x t C-t" . treemacs-find-file)
  ;;       ("C-x t M-t" . treemacs-find-tag)))

  ;; (use-package treemacs-evil
  ;;   :after (treemacs evil)
  ;;   :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

#+end_src

** Highlight indent guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    ;; To enable automatically in most programming modes:
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src

** Projectile

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    ;; Recommended keymap prefix on Windows/Linux
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
  
#+END_SRC

** Syntax check and auto completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :config
    (add-hook 'after-init-hook #'global-company-mode))

  (use-package flycheck
    :diminish flycheck-mode
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
 
** Git support

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

* Major modes
** web-mode & php-mode

   #+BEGIN_SRC emacs-lisp
   (use-package web-mode)
   (use-package php-mode)
   #+END_SRC

** markdown-mode

   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode)
   #+END_SRC

** yaml-mode

   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode)
   #+END_SRC

** nix-mode
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode)
#+END_SRC

** Platform.io

#+BEGIN_SRC emacs-lisp
  (use-package platformio-mode)
#+END_SRC
** AucTeX

#+BEGIN_SRC emacs-lisp
  (use-package auctex
  :defer t
  :init
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  ;; synctex
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (setq TeX-source-correlate-method 'synctex)
  (setq TeX-source-correlate-start-server t))
  ;; pdf tools
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
  ;; ZATHURA:
  ;; https://askubuntu.com/questions/1041919/integration-of-emacs-lualatex-with-evince-zathura-not-working-in-ubuntu-18-04-h
  ;;  (setq TeX-view-program-selection '((output-pdf "Zathura")))
  ;;  (add-to-list 'load-path "/usr/bin/vendor_perl"))

#+END_SRC

** Biblio

#+begin_src emacs-lisp
(use-package biblio)
#+end_src

** Org Mode
*** org
#+BEGIN_SRC emacs-lisp

    (use-package org
      :config
      ;;    (add-hook 'org-mode-hook 'turn-on-auto-fill)
      (setq org-directory "~/org")
      (setq org-refile-targets (quote (("~/org/gtd.org" :maxlevel . 4)
                                      ("~/org/someday.org" :maxlevel . 1)
                                      ("~/org/tickler.org" :maxlevel . 1))))
      (setq org-refile-use-outline-path 'file)
      (setq org-outline-path-complete-in-steps nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-default-notes-file (concat org-directory "/inbox.org"))
      (setq org-archive-location (concat org-directory "/archive/archive-" (format-time-string "%Y" (current-time)) ".org::datetree/"))
      (setq org-export-backends (quote (ascii beamer html icalendar latex md odt)))
      (setq org-tag-alist '(("@home" . ?h)
                            ("@work" . ?w)
                            ("@phone" . ?p)
                            ("@boat" . ?b)
                            ("@org" . ?o)
                            ("@city" . ?c)
                            ("@ToRead" . ?r)))
      (setq org-todo-keywords '((sequence "TODO(t)" "FREQ(f)" "PROJ(p)" "WAIT(w@/!)" "|" "DONE(d!)" "CNCL(c@/!)")))
      (setq org-todo-repeat-to-state t)
      (setq org-startup-indented t)
      (setq org-startup-truncated nil)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-num-skip-unnumbered t)
      (setq org-agenda-files (quote ("~/org/gtd.org" "~/org/tickler.org" "~/org/someday.org")))
      (setq org-agenda-window-setup "only-window")
      (setq org-agenda-span 1)
      (setq org-stuck-projects
            '("+LEVEL=2/-DONE-CNCL-FREQ"
              ("TODO" "NEXT" "WAIT" "PROJ")
              nil ""))
      (setq org-capture-templates
            '(
              ("t" "Todo" entry (file "~/org/inbox.org")
               "* TODO %?\n  %i")
              ("r" "Reading" entry (file "~/org/inbox.org")
               "* TODO Read: %?\n  %i")
              ("m" "Process mail" entry (file "~/org/inbox.org")
               "* TODO %?\nSCHEDULED: %t\nMail: %:fromname: %a")
              ("p" "Protocol" entry (file "~/org/inbox.org")
               "* TODO %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
              ("L" "Protocol Link" entry (file "~/org/inbox.org")
               "* TODO %?\n[[%:link][%:description]]")
              ))
      (setq org-src-tab-acts-natively t)
      (setq org-ellipsis " ⤵")  ;; …, ⤵, ▼, ↴, ⬎, ⤷, ⋱
      (set-face-underline 'org-ellipsis nil)
      (setq org-ctrl-k-protect-subtree t)
      (setq org-return-follows-link t)

      (add-to-list 'org-modules 'org-protocol)

      ;; ox-latex specific configuration
      (with-eval-after-load 'ox-latex
        (add-to-list 'org-latex-classes '("scrbook"
                                          "\\documentclass[11pt]{scrbook}"
                                          ("\\chapter{%s}" . "\\chapter*{%s}")
                                          ("\\section{%s}" . "\\section*{%s}")
                                          ("\\subsection{%s}" . "\\subsection*{%s}")
                                          ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))

#+END_SRC

In order to let the chromium plugin not ask every time for permission, create
the file /etc/chromium/policies/managed/org-protocol.json with the following
 content: {  "AutoLaunchProtocolsFromOrigins": [{ "allowed_origins": [ "*" ],  "protocol":"org-protocol"}]}

see https://github.com/sprig/org-capture-extension/issues/68
                                        
*** org-contrib

This is needed to allow for not exporting to latex those org headings that are tagged :ignore:.

#+BEGIN_src emacs-lisp

  (use-package org-contrib)
  (use-package ox-extra
    :after org-contrib
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines)))
  
#+END_src

*** org-journal

#+BEGIN_SRC emacs-lisp

  (use-package org-journal
      :after org
      :config
      (setq org-journal-dir "~/org/journal/")
      (setq org-journal-file-type 'weekly)
      (setq org-journal-file-format "journal-%Y.org")
      (setq org-journal-date-format "%A, %d %B %Y")
      (setq org-journal-created-property-timestamp-format "%Y-%m-%d")
      (setq org-journal-time-format ""))

#+END_SRC

*** org-superstar

Beautiful bullets. org-superstar is a descendent of org-bullets.

#+BEGIN_SRC emacs-lisp

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))
  
#+END_SRC

*** org-roam

Build a second brain with org-roam.

#+BEGIN_SRC emacs-lisp

    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (file-truename "~/org/roam/"))
      (org-roam-completion-everywhere t)
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ("C-c n g" . org-roam-graph)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today)
             :map org-mode-map
             ("C-M-i" . completion-at-point)
             :map org-roam-dailies-map
             ("Y" . org-roam-dailies-capture-yesterday)
             ("T" . org-roam-dailies-capture-tomorrow))
      :bind-keymap
      ("C-c n d" . org-roam-dailies-map)
      :config
      (org-roam-db-autosync-mode)
      ;; If you're using a vertical completion framework, you might want a more informative completion interface
      (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-db-autosync-mode)
      (org-roam-setup)
      ;; If using org-roam-protocol
      (require 'org-roam-dailies) ;; Ensure the keymap is available
      (require 'org-roam-protocol))

#+END_SRC

Visualize the org roam graph in browser:

#+begin_src emacs-lisp
  (use-package org-roam-ui)
#+end_src

*** htmlize

htmlize is used by org to export to HTML.
  
#+BEGIN_SRC emacs-lisp

  (use-package htmlize)
  
#+END_SRC

** pdf-tools

#+begin_src emacs-lisp

  (use-package pdf-tools
    :straight nil
    :config
    (pdf-tools-install))

#+end_src

** org-noter

Used to a sync notes in an org file with documents like PDF.
Just press 'i' in PDFView, DOCView and so on

#+BEGIN_SRC emacs-lisp
  
  (use-package org-noter
    :config
    (setq org-noter-notes-search-path '("~/org")))

#+END_SRC

* Keep folders clean

#+begin_src emacs-lisp

  ;; backup files: file.ext~
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  ;; auto-save files: #file.ext#
  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory))
  (setq auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  ;; undo-tree-mode files: .file.ext.~undo-tree~
  (setq undo-tree-history-directory-alist `(("." . ,(expand-file-name "tmp/undo-tree/" user-emacs-directory))))

#+end_src

* Global key bindings

** General

Open the file under cursor:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x f") 'find-file-at-point)
#+END_SRC
  
** shell
#+BEGIN_SRC emacs-lisp

  (defun jf/start-zsh () (interactive)
    (vterm "/run/current-system/sw/bin/zsh"))
  (global-set-key (kbd "s-s") 'jf/start-zsh)
  
#+END_SRC

** undo

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x u") 'undo-tree-visualize)
#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c j") 'org-journal-new-entry)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c n u") 'org-roam-ui-open)
#+END_SRC

** Magit

#+begin_src emacs-lisp

  (global-set-key (kbd "C-c g") 'magit-status)

#+end_src
** Mu4e

#+begin_src emacs-lisp

  (global-set-key (kbd "C-c m") 'mu4e)
  
#+end_src

* Mail Configuration

mu (including mu4e) needs to be installed via package manager, e.g. yay mu-git

1. run mbsync -a
2. initialize mu
   #+begin_src bash
     mu init \
        --my-address=foo@example.com \
        --my-address=bar@example.com \
        -m ~/Mail
   #+end_src

#+begin_src emacs-lisp

  (use-package mu4e
      :ensure nil
      :straight nil ;; use the system installed version
      :config
      (setq mu4e-change-filenames-when-moving t)
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-update-interval(* 5 60))
      (setq mu4e-maildir "~/Mail")
      (setq mu4e-confirm-quit t)
      (setq mu4e-view-show-images t)
      (setq mu4e-view-show-addresses 't)
      (setq mu4e-compose-format-flowed t)
      (setq mu4e-compose-cite-function 'message-cite-original) ;; alternative: 'message-cite-original-without-signature
      (add-hook 'mu4e-compose-mode-hook (defun disable-undo-tree-mode-in-mu4e-compose() "Disable undo tree mode" (undo-tree-mode -1)))
      (setq mail-user-agent 'mu4e-user-agent)
      (require 'smtpmail)
      (setq message-send-mail-function 'smtpmail-send-it)
      (setq message-kill-buffer-on-exit t)
      (setq mu4e-headers-fields
            '((:human-date . 12)
              (:flags . 6)
              (:maildir . 23)
              (:mailing-list . 10)
              (:from . 22)
              (:subject)))
      (setq mu4e-bookmarks
            '((:name "Combined inbox" :query "maildir:/private/inbox OR maildir:/work/inbox OR maildir:/b7/inbox OR maildir:/tudo/inbox OR maildir:/tudo/fsinfo" :key 105)
              (:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key 117)
              (:name "Drafts" :query "maildir:/private/drafts OR maildir:/work/drafts OR maildir:/b7/drafts OR maildir:/tudo/drafts" :key 100)
              (:name "Today's messages" :query "date:today..now" :key 116)
              (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key 119)
              (:name "Messages with images" :query "mime:image/*" :key 112)))
      (setq mu4e-maildir-shortcuts
            '(("/private/inbox" . ?p)
              ("/private/archives/2022" . ?P)
              ("/work/inbox" . ?w)
              ("/work/archives/2022" . ?W)
              ("/b7/inbox" . ?b)
              ("/b7/archives/2022" . ?B)
              ("/tudo/inbox" . ?d)
              ("/tudo/archives/2022" . ?D)))
      (setq smtpmail-queue-mail nil)  ;; start in direct mode
      (setq smtpmail-queue-dir "~/Mail/queue/cur")
      (setq mu4e-context-policy 'pick-first)
      (setq mu4e-contexts
            (list
             ;; private account
             (make-mu4e-context
              :name "Private"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/private" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "julian@flake.de")
                      (user-full-name . "Julian Flake")
                      (mu4e-compose-signature . nil)
                      (smtpmail-smtp-server . "nuthost.de")
                      (smtpmail-stream-type . starttls)
                      (smtpmail-smtp-service . 587)
                      (mu4e-drafts-folder . "/private/drafts")
                      (mu4e-sent-folder . "/private/sent")
                      (mu4e-refile-folder  . "/private/archives/2022")
                      (mu4e-trash-folder . "/private/trash")))
             ;; work account
             (make-mu4e-context
              :name "Work"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/work" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "flake@uni-koblenz.de")
                      (user-full-name    . "Julian Flake")
                      (mu4e-compose-signature . "Dipl.-Inf. Julian Flake\nUniversity of Koblenz-Landau, Campus Koblenz\nInstitute for Software Technology\nResearch Group Software Engineering")
                      (smtpmail-smtp-server . "smtp.uni-koblenz.de")
                      (smtpmail-stream-type . ssl)
                      (smtpmail-smtp-service . 465)
                      (mu4e-drafts-folder  . "/work/drafts")
                      (mu4e-sent-folder  . "/work/sent")
                      (mu4e-refile-folder  . "/work/archives/2022")
                      (mu4e-trash-folder  . "/work/trash")))
             ;; TUDo account
             (make-mu4e-context
              :name "TUDo"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/tudo" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "julian.flake@tu-dortmund.de")
                      (user-full-name . "Julian Flake")
                      (mu4e-compose-signature . nil)
                      (smtpmail-smtp-server . "unimail.tu-dortmund.de")
                      (smtpmail-stream-type . starttls)
                      (smtpmail-smtp-service . 587)
                      (mu4e-drafts-folder . "/tudo/drafts")
                      (mu4e-sent-folder . "/tudo/sent")
                      (mu4e-refile-folder  . "/tudo/archives/2022")
                      (mu4e-trash-folder . "/tudo/trash")))
             ;; b7 account
             (make-mu4e-context
              :name "B7"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/b7" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "julian.flake@blumenthal7.de")
                      (user-full-name . "Julian Flake")
                      (mu4e-compose-signature . nil)
                      (smtpmail-smtp-server . "smtp.strato.de")
                      (smtpmail-stream-type . ssl)
                      (smtpmail-smtp-service . 465)
                      (mu4e-drafts-folder . "/b7/drafts")
                      (mu4e-sent-folder . "/b7/sent")
                      (mu4e-refile-folder  . "/b7/archives/2022")
                      (mu4e-trash-folder . "/b7/trash")))))

      ;; let me confirm/decline to send an email with empty subject
      (add-hook 'message-send-hook
                (lambda() (interactive)
                  (or (message-field-value "Subject")
                      (yes-or-no-p "Really send without Subject? ")
                      (keyboard-quit))))

      ;; add meta information to replies and forwards
      ;; problem: we don't have variables substituted by original Subject: (e.g. %s) and To: (e.g. %t)
      ;; (defun citation-line-function ()
      ;;   (setq message-citation-line-format
      ;;         (if (eq mu4e-compose-type 'reply)
      ;;             "On %a %d %b %Y %T %z (%Z), %f wrote:\n"
      ;;           (if (eq mu4e-compose-type 'forward)
      ;;               "----- Forwarded message -----\nSubject: %s\nFrom: %f\nTo: %t\nDate: %a %d %b %Y %T %z (%Z)\n\n"))))
      ;; (add-hook 'mu4e-compose-pre-hook 'citation-line-function)
      ;; this at least adds the date of cited mail:
      (setq message-citation-line-function 'message-insert-formatted-citation-line)
      (mu4e t))

#+end_src

Alert

#+begin_src emacs-lisp
  (use-package mu4e-alert
    :config
    (mu4e-alert-set-default-style 'notifications)
    (mu4e-alert-enable-mode-line-display)
    (mu4e-alert-enable-notifications))
#+end_src

