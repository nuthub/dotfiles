#+TITLE: EXWM Configuration
#+STARTUP: overview
#+TODO: TODO CHECK SKIP

* Some functions

Partly taken or adopted from daviwil (emacs-from-scratch) screencasts.

#+begin_src emacs-lisp
  ;; from EFS
  (defun jf/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  ;; from EFS
  (defun jf/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun jf/exwm-init-hook ()
      (message "run jf/exwm-init-hook...")
      ;; jump to 1 as default
      (exwm-workspace-switch-create 1)
      ;;(display-time-mode 1)
      ;; start some tray and background applications
      ;; started by xsession:
      ;; (jf/run-in-background "xss-lock --transfer-sleep-lock -- lockscreen")
      ;; (jf/run-in-background "fehbg")
      (jf/run-in-background "nm-applet")
      (jf/run-in-background "gnome-keyring-daemon")
      (jf/run-in-background "nextcloud --background")
      (jf/run-in-background "pasystray")
      (jf/run-in-background "blueman-applet")
      (jf/run-in-background "udiskie -t")
      (jf/run-in-background "solaar -w hide")

      ;; Start the Polybar panel
      (jf/start-panel)
      (org-agenda-list)
      (message "jf/exwm-init-hook finished..."))

    ;; call autorandr and log then current config to *Messages*
    (defun jf/update-displays () (interactive)
      (jf/run-in-background "autorandr --change --force")
      (message "Display config: %s"
               (string-trim (shell-command-to-string "autorandr --current"))))

#+end_src
* EXWM itself
#+begin_src emacs-lisp


  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 10)

    ;; exwm init hook
    (add-hook 'exwm-init-hook #'jf/exwm-init-hook)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'jf/exwm-update-class)

    (require 'exwm-randr)
    (setq exwm-randr-workspace-output-plist '(1 "DP-2-3" 8 "DP-2-2" 9 "eDP-1"))
    (add-hook 'exwm-randr-screen-change-hook #'jf/update-displays)
    (jf/update-displays)
    (message "run exwm-randr-enable...")
    (exwm-randr-enable)
    (message "exwm-randr-enable finished...")

    (setq exwm-workspace-warp-cursor nil)
    (setq mouse-autoselect-window nil)
    (setq focus-follows-mouse nil)

    ;; Automatically move EXWM buffer to current workspace when selected
    (setq exwm-layout-show-all-buffers t)

    ;; Display all EXWM buffers in every workspace buffer list
    (setq exwm-workspace-show-all-buffers t)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j  ;; Buffer list
            ?\C-\
            ?\s-s))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)

            ;; Move between windows
            ([s-left] . windmove-left)
            ([s-right] . windmove-right)
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)

            ;; Launch applications via shell command
            ([?\s-d] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                            (number-sequence 0 9))))
    (message "run exwm-enable...")
    (exwm-enable)
    (message "exwm-enable finished..."))
#+end_src

* Media keys
#+begin_src emacs-lisp
  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))
#+end_src

* Polybar

from EFS

#+begin_src emacs-lisp
  ;; Make sure the server is started (better to do this in your main Emacs config!)
  ;;(server-start)

  (defvar jf/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun jf/kill-panel ()
    (interactive)
    (when jf/polybar-process
      (ignore-errors
        (kill-process jf/polybar-process)))
    (setq jf/polybar-process nil))

  (defun jf/start-panel ()
    (interactive)
    (jf/kill-panel)
    (setq jf/polybar-process (start-process-shell-command "polybar" nil "polybar panel -r")))

  (defun jf/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun jf/send-polybar-exwm-workspace ()
    (jf/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'jf/send-polybar-exwm-workspace)

#+end_src

