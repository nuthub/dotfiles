#+TITLE: Emacs Configuration
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes
#+TODO: TODO COMMENT

* Startup time

Taken from /emacs from scratch/.
#+BEGIN_SRC emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+END_SRC

#+RESULTS:
| efs/display-startup-time |

* Bootstrap straight.el

The bootstrap process of this literate config is the following:

1. in ~early-init.el~: we avoid enabling package.el at startup
2. in ~init.el~: we setup ~straight.el~ and pull a recent version of org mode to org-babel-load-file this file (~README.org~), which tangles it into the file ~README.el~
3. here, in ~README.org~ or its tangled ~README.el~, respectively, we install 'use-package' via straight.el and use straight.el's version of 'use-package' by default.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

* Basic personal information
  
** This is used to identify myself, and to find my own GnuPG key
  
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Julian Flake")
  (setq user-mail-address "julian@flake.de")
#+END_SRC

** TODO Some localizations for the calendar

Holidays are not shown in agenda-holidays (org-agenda 'h')

#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1
        calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                 "Donnerstag" "Freitag" "Samstag"]
        calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                   "Juni" "Juli" "August" "September"
                                   "Oktober" "November" "Dezember"]
        calendar-intermonth-text
        '(propertize
  	(format "%2d"
  		(car
  		 (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
  	'font-lock-face 'font-lock-function-name-face))

  (setq solar-n-hemi-seasons
        '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "Neujahr")
          (holiday-fixed 5 1 "1. Mai / Tag der Arbeit")
          (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

  ;; Feiertage für Bayern, weitere auskommentiert
  (setq holiday-christian-holidays
        '(;;(holiday-fixed 1 6 "Heilige Drei Könige")
          (holiday-easter-etc -48 "Rosenmontag")
          ;; (holiday-easter-etc -3 "Gründonnerstag")
          (holiday-easter-etc  -2 "Karfreitag")
          (holiday-easter-etc   0 "Ostersonntag")
          (holiday-easter-etc  +1 "Ostermontag")
          (holiday-easter-etc +39 "Christi Himmelfahrt")
          (holiday-easter-etc +49 "Pfingstsonntag")
          (holiday-easter-etc +50 "Pfingstmontag")
          (holiday-easter-etc +60 "Fronleichnam")
          ;;(holiday-fixed 8 15 "Mariae Himmelfahrt")
          (holiday-fixed 11 1 "Allerheiligen")
          ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
    	(holiday-float 11 0 1 "Totensonntag" 20)
    	(holiday-float 12 0 -4 "1. Advent" 24)
          (holiday-float 12 0 -3 "2. Advent" 24)
          (holiday-float 12 0 -2 "3. Advent" 24)
          (holiday-float 12 0 -1 "4. Advent" 24)
          (holiday-fixed 12 25 "1. Weihnachtstag")
          (holiday-fixed 12 26 "2. Weihnachtstag")))
#+END_SRC
* Start a server

#+begin_src emacs-lisp
  ;;  (load "server")
  ;;  (unless (server-running-p) (server-start))
#+end_src

* Keep folders clean

#+begin_src emacs-lisp

  ;; backup files: file.ext~
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  ;; auto-save files: #file.ext#
  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory))
  (setq auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  ;; undo-tree-mode files: .file.ext.~undo-tree~
  (setq undo-tree-history-directory-alist `(("." . ,(expand-file-name "tmp/undo-tree/" user-emacs-directory))))

#+end_src

* Look & feel
** Font

I set my default fonts in ~~/.fonts.conf~. This is just an example:

#+begin_src xml :tangle no
  <?xml version="1.0"?>
  <!DOCTYPE fontconfig SYSTEM "urn:fontconfig:fonts.dtd">
  <fontconfig>
    <alias>
      <family>monospace</family>
      <prefer>
        <family>Fira Code</family>
      </prefer>
    </alias>
    <alias>
      <family>sans-serif</family>
      <prefer>
        <family>Noto Sans</family>
      </prefer>
    </alias>
  </fontconfig>
#+end_src

** Ligatures

#+BEGIN_SRC emacs-lisp

  (use-package ligature
   :config
   ;; Enable the www ligature in every possible major mode
   ;; (ligature-set-ligatures 't '("www"))

   ;; Enable the www ligature in every possible major mode
   (ligature-set-ligatures 'org-mode '("www" "->"))

   ;; Enable ligatures in programming modes
   (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                        ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                        "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                        "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                        "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                        "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                        "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                        "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                        "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                        "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
   (global-ligature-mode 't))
#+END_SRC

** General appearance

#+BEGIN_SRC emacs-lisp

  (menu-bar-mode -1) ; switch off menu bar
  (tool-bar-mode -1) ; switch off tool bar
  (scroll-bar-mode -1) ; switch off scroll bar
  (column-number-mode t) ; show column number next to line number
  (global-hl-line-mode t) ; highlight the current line
  (setq visible-bell t)
  (setq inhibit-startup-screen t) ;; don't show splash

#+END_SRC

** Spacious Padding

#+BEGIN_SRC emacs-lisp
  (use-package spacious-padding
    :config
    (setq spacious-padding-widths
  	'( :internal-border-width 15
  	   :header-line-width 4
  	   :mode-line-width 6
  	   :tab-width 4
  	   :right-divider-width 30
  	   :scroll-bar-width 8))
    (spacious-padding-mode 1))
#+END_SRC

** Theme
*** modus vivendi/operandi (light/dark)

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :after (spacious-padding)
    :config
    (load-theme 'modus-vivendi t) ; dark
    ;; (load-theme 'modus-operandi t) ; light
    (spacious-padding-mode))
#+END_SRC

** Smooth scrolling

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode)
  (setq pixel-scroll-precision-large-scroll-height 40.0)
#+end_src

** A beautiful modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 18))
#+end_src

** Diminish

This is to hide minor modes from mode line. You can use `:diminish foo-mode` then in use-package(...)

#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC
   
** Show search result counts in modeline

#+BEGIN_SRC emacs-lisp

  (setq isearch-lazy-count t)
  (setq isearch-lazy-highlight t)

#+END_SRC

** Line numbers on the left
   
=display-line-numbers-mode= is a built in minor mode

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 0)
  ;; Disable line numbers for some modes
    ;; (dolist (mode '(org-mode-hook
    ;; 		org-agenda-mode-hook
    ;;                 vterm-mode-hook
    ;;                 term-mode-hook
    ;;                 shell-mode-hook
    ;;                 eshell-mode-hook
    ;;                 pdf-view-mode-hook
    ;; 		nov-mode-hook))
    ;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
    ;; Enable line numbers for some modes
    (dolist (mode '(prog-mode-hook))
      (add-hook mode (lambda ()
  			 (display-line-numbers-mode 1))))
#+END_SRC

** Smart paranthesis & Highlight parenthesis

An alternative to /smartparens/ is /paren/.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode t)
      (show-paren-mode t)))  
#+END_SRC

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** All-the-icons

You must run 'M-x all-the-icons-install-fonts' to actually download the icons to '~/.local/share/fonts/'.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package all-the-icons-completion
    :config (all-the-icons-completion-mode))

#+end_src

** COMMENT Highlight indent guides
#+begin_src emacs-lisp :tangle no
  (use-package highlight-indent-guides
    :defer 0
    :config
    (setq highlight-indent-guides-method 'character)
    ;; To enable automatically in most programming modes:
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src

** Olivetti mode (writing environment)

#+BEGIN_SRC emacs-lisp
  (use-package olivetti)
#+END_SRC

* Major modes
** Org Mode

#+BEGIN_SRC emacs-lisp :noweb no-export
  (use-package org
    :defer 0
    ;; the bind may defer the package loading, see documentation (C-h f use-package RET)
    :bind (:map org-mode-map
      	      ("C-c C-<left>" . org-promote-subtree)
      	      ("C-c C-<right>" . org-demote-subtree)
  	      ("C-c ," . org-timestamp-inactive))
    :config
    <<org-config-look-and-feel>>
    <<org-config-task-management-and-agenda>>
    <<org-config-capture-templates>>
    <<org-config-latex-export>>
    <<org-config-display-pdf-inline>>   
    )
#+END_SRC

*** Org's basics & Look & Feel

#+begin_src emacs-lisp :noweb-ref org-config-look-and-feel
  (set-face-underline 'org-ellipsis nil)
  (setq org-ellipsis " …")
  (setq org-startup-indented t)
  (setq org-startup-truncated nil)
  (setq org-src-tab-acts-natively t)
  (setq org-ctrl-k-protect-subtree t)
  (setq org-return-follows-link t)
  (setq org-num-skip-unnumbered t)
  (setq org-num-skip-tags (list "ignore" "noexport" "unnumbered"))
  (setq org-goto-interface 'outline-path-completion)
  (setq org-cite-global-bibliography '("~/Documents/Literatur/Literatur.bib"))
  ;; beautiful bullets
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

*** Task Management, Agenda, Archive, Refiling

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-config-task-management-and-agenda

    ;; Task management
    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/inbox.org"))
    (setq org-tag-alist '(("house" . ?h)
      		      ("personal" . ?p)
              	      ("promotion" . ?P)
      		      ("self" . ?s)
              	      ("work" . ?w)
              	      ("teaching" . ?t)
              	      ("sail" . ?S)
    		      ("nerdism" . ?n)))
    (setq org-todo-keywords '((sequence "TODO(t)" "FREQ(f)" "EVNT(e)" "PROJ(p)" "WAIT(w@/!)" "|" "DONE(d!)" "CNCL(c@/!)")))
    (setq org-todo-repeat-to-state t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; Agenda
    (setq org-agenda-files '("~/org/gtd.org"
    			 "~/org/tickler.org"
    			 "~/org/someday.org"
    			 "~/org/inbox.org"
    			 "~/org/events-personal.org"
    			 "~/org/events-rgse.org"
    			 "~/org/events-work.org"))
    (setq org-agenda-window-setup 'current-frame)
    (setq org-agenda-span 1)
    (setq org-agenda-time-grid
          '((weekly remove-match)
      	nil
      	"......." "------------------"))
    (setq org-agenda-include-diary t)
    (setq org-agenda-custom-commands
          '(("w" "Weekly cleanup" todo "CNCL|DONE")
      	("c" "Events of the week" agenda ""
    	 (
    	  ;; agenda will start in week view
    	  (org-agenda-span 7)
    	  ;; ensures that repeating events appear on all relevant dates
      	  (org-agenda-repeating-timestamp-show-all t)
    	  ;; limits agenda view to timestamped items
      	  (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))))
    (setq org-stuck-projects '("-noproject+LEVEL=2/-DONE-FREQ"
      			   ("TODO" "NEXT")
      			   nil ""))

    ;; Refiling
    (setq org-refile-targets (quote (("~/org/gtd.org" :maxlevel . 4)
              			 ("~/org/someday.org" :maxlevel . 1)
              			 ("~/org/tickler.org" :maxlevel . 1)
              			 ("~/org/events-personal.org" :maxlevel . 2)
  				 ("~/org/events-rgse.org" :maxlevel . 2))))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)

    ;; Archive
    (setq org-archive-location (concat org-directory "/archive/archive-" (format-time-string "%Y" (current-time)) ".org::datetree/"))

#+END_SRC

*** Org capture templates

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-config-capture-templates

  (setq org-capture-templates
        '(
    	("t" "Todo" entry (file "~/org/inbox.org")
           "* TODO %?\n  %i")
    	("e" "Event" entry (file+headline "~/org/events-personal.org" "Inbox")
  	 "* %^{Event Title}\n\n%^{Date and Time}T\nLocation: %^{Location}\n%i%?" :time-prompt t)
    	("n" "Note" entry (file "~/org/inbox.org")
           "* NOTE %U %?\n- %i")
    	("m" "Process Mail" entry (file "~/org/inbox.org")
           "* TODO %?\nSCHEDULED: %t\nMail: %:fromname: %a")
  	;; ("r" "Recipe" entry (file "~/org/cookbook.org")
  	;;  "%(org-chef-get-recipe-from-url)"
  	;;  :empty-lines 1)
  	("R" "Recipe" entry (file "~/org/cookbook.org")
  	 "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Zutaten\n   %?\n** Zubereitung\n\n")))

#+END_SRC

*** LaTeX export classes + beamer support

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-config-latex-export

  ;; use luatex as LaTeX Compiler
  (setq org-latex-compiler "lualatex")

  ;; Include e set (or known email address)
  (setq org-export-with-email t)

  ;; compile latex in foreground to directly retrieve compilation errors
  (setq org-export-in-background nil)

  ;; use emacs's font-locking for syntax highlighting in LaTeX exports
  (setq org-latex-src-block-backend 'engraved)

  ;; ox-latex: Add KomaScript to the known classes
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes '("scrbook"
                                	    "\\documentclass[11pt]{scrbook}"
                                	    ("\\chapter{%s}" . "\\chapter*{%s}")
                                	    ("\\section{%s}" . "\\section*{%s}")
                                	    ("\\subsection{%s}" . "\\subsection*{%s}")
                                	    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                	    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                	    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes '("scrartcl"
                                	    "\\documentclass[11pt]{scrartcl}"
                                	    ("\\section{%s}" . "\\section*{%s}")
                                	    ("\\subsection{%s}" . "\\subsection*{%s}")
                                	    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                	    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                	    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes '("moderncv"
                                	    "\\documentclass{moderncv}"
                                	    ("\\section{%s}" . "\\section*{%s}")
        				    ("\\subsection{%s}" . "\\subsection{%s}"))))
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes '("my-beamer"
                          	    "\\documentclass[presentation,aspectratio=169,allowframebreaks]{beamer}
          \\usepackage{pdfpages}
          \\institute[RGSE]{University of Koblenz, Research Group Software Engineering}
          \\setbeamertemplate{caption}{\\raggedright\\insertcaption\\par}
          \\beamertemplatenavigationsymbolsempty%
          \\addtobeamertemplate{navigation symbols}{}{%
              \\usebeamerfont{footline}%
              \\usebeamercolor[fg]{footline}%
              \\hspace{1em}%
              \\insertframenumber % / \\inserttotalframenumber%
          }
          \\setbeamertemplate{section page}{%
            \\begin{centering}%
              \\begin{beamercolorbox}[sep=12pt,center]{section title}%
                \\usebeamerfont{section title}\\insertsection\\par%
              \\end{beamercolorbox}%
            \\end{centering}%
          }%
          \\AtBeginSection[]{%
           \\begin{frame}%
             \\sectionpage%
           \\end{frame}%
          }%"
                          	    ("\\section{%s}" . "\\section*{%s}")
                          	    ("\\subsection{%s}" . "\\subsection*{%s}")
                          	    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

  ;; add beamer to the export backends
  (add-to-list 'org-export-backends 'beamer)
  (setq org-beamer-environments-extra
        '(("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}")))

  ;; koma-letter
  (eval-after-load 'ox '(require 'ox-koma-letter))

  (eval-after-load 'ox-koma-letter
    '(progn
       (add-to-list 'org-latex-classes
                    '("my-koma-letter"
        		    "\\documentclass[11pt,parskip,DIV=15,fromalign=right]\{scrlttr2\}
        \\usepackage[german]{babel}
        \\renewcommand{\\familydefault}{\\sfdefault}
               \[DEFAULT-PACKAGES]
               \[PACKAGES]
               \[EXTRA]"))

       (setq org-koma-letter-default-class "my-koma-letter")))

#+END_SRC

*** Display PDF images inline

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-config-display-pdf-inline

  ;; Display PDF files inline
  ;; taken from https://stackoverflow.com/questions/15407485/inline-pdf-images-in-org-mode

  (add-to-list 'image-file-name-extensions "pdf")

  (setq org-image-actual-width 600)

  (setq org-imagemagick-display-command "convert -density 600 \"%s\" -thumbnail \"%sx%s>\" \"%s\"")
  (defun org-display-inline-images (&optional include-linked refresh beg end)
    "Display inline images.
    Normally only links without a description part are inlined, because this
    is how it will work for export.  When INCLUDE-LINKED is set, also links
    with a description part will be inlined.  This
    can be nice for a quick
    look at those images, but it does not reflect what exported files will look
    like.
    When REFRESH is set, refresh existing images between BEG and END.
    This will create new image displays only if necessary.
    BEG and END default to the buffer boundaries."
    (interactive "P")
    (unless refresh
      (org-remove-inline-images)
      (if (fboundp 'clear-image-cache) (clear-image-cache)))
    (save-excursion
      (save-restriction
        (widen)
        (setq beg (or beg (point-min)) end (or end (point-max)))
        (goto-char beg)
        (let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                          (substring (org-image-file-name-regexp) 0 -2)
                          "\\)\\]" (if include-linked "" "\\]")))
              old file ov img)
          (while (re-search-forward re end t)
            (setq old (get-char-property-and-overlay (match-beginning 1)
                                                     'org-image-overlay)
    		file (expand-file-name
                        (concat (or (match-string 3) "") (match-string 4))))
            (when (file-exists-p file)
              (let ((file-thumb (format "%s%s_thumb.png" (file-name-directory file) (file-name-base file))))
                (if (file-exists-p file-thumb)
                    (let ((thumb-time (nth 5 (file-attributes file-thumb 'string)))
                          (file-time (nth 5 (file-attributes file 'string))))
                      (if (time-less-p thumb-time file-time)
    			(shell-command (format org-imagemagick-display-command
    					       file org-image-actual-width org-image-actual-width file-thumb) nil nil)))
                  (shell-command (format org-imagemagick-display-command
                                         file org-image-actual-width org-image-actual-width file-thumb) nil nil))
                (if (and (car-safe old) refresh)
                    (image-refresh (overlay-get (cdr old) 'display))
                  (setq img (save-match-data (create-image file-thumb)))
                  (when img
                    (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                    (overlay-put ov 'display img)
                    (overlay-put ov 'face 'default)
                    (overlay-put ov 'org-image-overlay t)
                    (overlay-put ov 'modification-hooks
                                 (list 'org-display-inline-remove-overlay))
                    (push ov org-inline-image-overlays))))))))))
#+END_SRC

** Syntax highlighting in org mode exports

For syntax highlighted source code blocks, I use the font-locking mode of emacs. The package engrave-faces contains LaTeX, Ansi and HTML faces.

#+begin_src emacs-lisp
  (use-package engrave-faces)
#+end_src

** org-roam

Build a second brain with org-roam.

#+BEGIN_SRC emacs-lisp

    (use-package org-roam
      :after org
      :straight (:type git
        		   :local-repo "~/git/org-roam")
      :demand t ; this makes 
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ("C-c n g" . org-roam-graph)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-date)
             :map org-mode-map
             ("C-M-i" . completion-at-point)
             :map org-roam-dailies-map
             ("Y" . org-roam-dailies-capture-yesterday)
             ("T" . org-roam-dailies-capture-tomorrow))
      :bind-keymap
      ("C-c n d" . org-roam-dailies-map)
      :config
      (setq org-roam-database-connector 'sqlite-builtin) ;; emacs 29 and newer
      (setq org-roam-directory (file-truename "~/org/roam/"))
      (setq org-roam-completion-everywhere t)
      ;; If you're using a vertical completion framework, you might want a more informative completion interface
      (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-db-autosync-mode)
      (org-roam-setup)
      (org-roam-update-org-id-locations)
      (setq org-roam-capture-templates '(
        				     ("d" "default" plain "%?"
        				      :target (file+head
        					       "%<%Y%m%d%H%M%S>-${slug}.org"
        					       "#+title: ${title}\n")
        				      :unnarrowed t)
        				     ("n" "literature note" plain "%?"
        				      :target (file+head
        					       "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
        					       "#+title: [${citar-citekey}] ${note-title}\n#+filetags: literature_note\n\n")
        				      :unnarrowed t))) ; org-roam-capture-templates
      (require 'org-roam-dailies) ;; Ensure the keymap is available
      (setq org-roam-dailies-capture-templates '(
    					     ("d" "default" entry "* %?"
    					      :target
    					      (file+head "%<%Y-%m-%d_%A>.org" "#+title: %<%Y-%m-%d (%A)>\n#+filetags: daily\n\n- Links: [[id:b3cb74b2-a385-4132-a55e-8cf561eed9fc][Journaling]]\n\n* Daily Planing
  - [ ] Journal [[elisp:(org-roam-dailies-goto-yesterday 1)][yesterday]]
  - [ ] Process [[file:~/Syncthing/org/inbox.org][inbox]]
  - [ ] Check [[elisp:(mu4e)][mails]]
  - [ ] Check [[elisp:(org-agenda-list)][agenda]]\n")))) ; org-roam-dailies-capture-templaes
      ) ; use-package org-roam

#+END_SRC

Visualize the org roam graph in browser

#+begin_src emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
  	org-roam-ui-follow t
  	org-roam-ui-update-on-save t
  	org-roam-ui-open-on-start t))
#+end_src

** ox-hugo

#+begin_src emacs-lisp
  (use-package ox-hugo)
#+end_src

** HTML Export

htmlize is used by org to export to HTML.
  
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :defer 0)
#+END_SRC

** org-super-agenda

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :config
    (setq org-super-agenda-groups
  	'(;; Each group has an implicit boolean OR operator between its selectors.
            (:name "Events"  ; Optionally specify section name
                   :time-grid t)  ; Items that appear on the time grid
  	   (:name "Direct Actions"
  		  :category ("Actions"))
             (:name "Personal"
                    :tag ("personal" "self"))
  	   (:name "Work"
                    :tag ("teaching" "work")
  		  :category ("Work" "Lehre"))
             (:name "Promotion"
                    :tag "promotion"
  		  :category "Promotion")
  	   (:name "Reading"
                    :category "reading")
  	   (:name "House Routines"
                    :tag "house")
  	   (:name "Sailing"
                    :tag "sail"
  		  :category "Segeln")
  	   (:name "Habits"
                    :habit t)
             ;; Groups supply their own section names when none are given
             (:todo "WAIT" :order 8)  ; Set order of this section
             ;; After the last group, the agenda will display items that didn't
             ;; match any of these groups, with the default order position of 99
             ))
    (org-super-agenda-mode))
#+end_src

** org-babel

Activate some Babel languages
#+BEGIN_SRC emacs-lisp

  (use-package org
    :after chatgpt-shell
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((dot . t)
       (emacs-lisp .t)
       (java .t)
       (shell . t)
       (sqlite . t)
       (latex . t))))
    
#+END_SRC

#+begin_src emacs-lisp
  (use-package ob-cypher
    :ensure t
    :config
    (add-to-list 'org-babel-load-languages '(cypher . t))
    (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
    (add-to-list 'org-babel-tangle-lang-exts '("cypher" . "cypher")))
#+end_src

** org-contrib

This is needed to allow for not exporting to latex those org headings that are tagged :ignore:.

#+BEGIN_src emacs-lisp

  (use-package org-contrib
    :after org)
  (use-package ox-extra
    :after org-contrib
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines)))

#+END_src

** COMMENT org-noter

Used to a sync notes in an org file with documents like PDF.
Just press 'i' in PDFView, DOCView and so on

#+BEGIN_SRC emacs-lisp :tangle no

  (use-package org-noter
    :if (display-graphic-p)
    :after org
    :config
    (setq org-noter-notes-search-path '("~/org"))
    ;; https://github.com/weirdNox/org-noter/issues/44
    (defun my/no-op (&rest args))
    (advice-add 'org-noter--set-notes-scroll :override 'my/no-op))

#+END_SRC

* Other major modes
** magit: Git support

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer 0
    :config
    ;; gpg signing is at transient level 5, default was to show up to level 4
    (setq transient-default-level 5))
#+END_SRC

** pdf-tools

#+begin_src emacs-lisp

  (use-package pdf-tools
    :straight nil
    :config
    (require 'pdf-occur) ;; if I don't require pdf-occur before pdf-tools-install, I get a warning at startup
    (pdf-tools-install)
    :init
    (setq-default pdf-view-display-size 'fit-page))

#+end_src

** Biblio

#+begin_src emacs-lisp

  (use-package biblio :defer 0)
  
#+end_src

** AucTeX

#+BEGIN_SRC emacs-lisp

  (use-package tex
    :defer nil
    :straight auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-engine 'luatex)
    ;; synctex
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    ;; pdf tools
    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
    (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))))

#+END_SRC

** JustFile mode

Two modes:
- just-mode to edit justfiles
- justl.el to run just on justfiles

#+begin_src emacs-lisp
  (use-package just-mode)
  (use-package justl)
#+end_src

** web-mode & php-mode

   #+BEGIN_SRC emacs-lisp

     (use-package web-mode :defer 0)
     (use-package php-mode :defer 0)
     
   #+END_SRC

** markdown-mode

   #+BEGIN_SRC emacs-lisp

     (use-package markdown-mode :defer 0)

   #+END_SRC

** yaml-mode

   #+BEGIN_SRC emacs-lisp

     (use-package yaml-mode :defer 0)

   #+END_SRC

** Platform.io

#+BEGIN_SRC emacs-lisp

  (use-package platformio-mode :defer 0)
  
#+END_SRC

** GUIX

#+BEGIN_SRC emacs-lisp

  (use-package guix)
  (use-package geiser-guile
    :config
    ;; Angenommen das Guix-Checkout ist in ~/git/guix.
    (with-eval-after-load 'geiser-guile
      (add-to-list 'geiser-guile-load-path "~/git/guix"))
    (with-eval-after-load 'yasnippet
      (add-to-list 'yas-snippet-dirs "~/git/guix/etc/snippets/yas")))
#+END_SRC

** ChatGPT Shell

Store the API key in .authinfo. ChatGPT and Dall-E use the same API key.

#+BEGIN_SRC emacs-lisp

  (use-package chatgpt-shell
   :requires shell-maker
   :ensure t
   :config (setq chatgpt-shell-openai-key (auth-source-pick-first-password
  				 :host "api.openai.com")))
   
#+END_SRC

** nov

#+begin_src emacs-lisp
  (use-package nov)
#+end_src

** COMMENT ement.el

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ement)
#+END_SRC

** COMMENT JAVA LSP

#+begin_src emacs-lisp :tangle no
  ;;  (use-package projectile)
  ;;  (use-package flycheck)
  ;;  (use-package yasnippet :config (yas-global-mode))
  (use-package lsp-mode :hook ((lsp-mode . lsp-enable-which-key-integration)))
  (use-package hydra)
  ;;  (use-package company)
  (use-package lsp-ui)
  ;; (use-package which-key :config (which-key-mode))
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
  ;; (use-package dap-java :ensure nil)
  ;; (use-package helm-lsp)
  ;; (use-package helm
  ;; :config (helm-mode))
  (use-package lsp-treemacs)
#+end_src

** eglot Java
The built-in LSP server

#+begin_src emacs-lisp
  (add-hook 'java-mode-hook 'eglot-java-mode)
  (add-hook 'eglot-java-mode-hook (lambda ()                                        
    (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
    (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
    (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
    (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
    (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
    (define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh)))

#+end_src

* Minor modes & common packages
** Vertico

(Vertical) Completion framework: Vertico is the successor of selectrum.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    ;; Different scroll margin
    ;;(setq vertico-scroll-margin 0)
    ;; Show more candidates
    (setq vertico-count 15)
    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+END_SRC

** Orderless
This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order. [[https://github.com/oantolin/orderless]]

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** Consult
Completion allows you to quickly select an item from a list of candidates.

#+BEGIN_SRC emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
  	 ("C-c M-x" . consult-mode-command)
  	 ("C-c h" . consult-history)
  	 ("C-c k" . consult-kmacro)
  	 ("C-c m" . consult-man)
  	 ("C-c i" . consult-info)
  	 ([remap Info-search] . consult-info)
  	 ;; C-x bindings (ctl-x-map)
  	 ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
  	 ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
  	 ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  	 ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
  	 ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
  	 ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
  	 ;; Custom M-# bindings for fast register access
  	 ("M-#" . consult-register-load)
  	 ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
  	 ("C-M-#" . consult-register)
  	 ;; Other custom bindings
  	 ("M-y" . consult-yank-pop)                ;; orig. yank-pop
  	 ;; M-g bindings (goto-map)
  	 ("M-g e" . consult-compile-error)
  	 ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
  	 ("M-g g" . consult-goto-line)             ;; orig. goto-line
  	 ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
  	 ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
  	 ("M-g m" . consult-mark)
  	 ("M-g k" . consult-global-mark)
  	 ("M-g i" . consult-imenu)
  	 ("M-g I" . consult-imenu-multi)
  	 ;; M-s bindings (search-map)
  	 ("M-s d" . consult-find)
  	 ("M-s D" . consult-locate)
  	 ("M-s g" . consult-grep)
  	 ("M-s G" . consult-git-grep)
  	 ("M-s r" . consult-ripgrep)
  	 ("M-s l" . consult-line)
  	 ("M-s L" . consult-line-multi)
  	 ("M-s k" . consult-keep-lines)
  	 ("M-s u" . consult-focus-lines)
  	 ;; Isearch integration
  	 ("M-s e" . consult-isearch-history)
  	 :map isearch-mode-map
  	 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
  	 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
  	 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
  	 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
  	 ;; Minibuffer history
  	 :map minibuffer-local-map
  	 ("M-s" . consult-history)                 ;; orig. next-matching-history-element
  	 ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
  	register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
  	xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+END_SRC

** Marginalia

Enriches selection lists (and completion minibuffers, e.g. consult) with additional information.

#+BEGIN_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :defer 0
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (;;("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+END_src

** COMMENT Company mode

#+begin_src emacs-lisp :tangle no
  (use-package company
    :diminish company-mode
    :config
    (add-hook 'after-init-hook #'global-company-mode))
#+end_src

** Corfu (Company replacement)

#+begin_src emacs-lisp

  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    :hook ((prog-mode . corfu-mode)
           (shell-mode . corfu-mode)
           (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

#+end_src

** Syntax check with flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer 0
    :diminish flycheck-mode
    :config
    (setq flycheck-emacs-lisp-load-path 'inherit)
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
 
** Spell check with flyspell (using enchant)

enchant uses aspell or hunspell or whatever it can find. ~enchant-lsmod-2~ tells, what enchant-2 can find. Saved words are stored in ~~./config/enchant~.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "enchant-2")
  (ispell-change-dictionary "de_DE")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

** embark & embark-consult
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

** citar & citar-embark & citar-org-roam

Allows to browse bibtex file(s), insert citations, open files, links and notes. It's a helm-bibtext replacement.
#+BEGIN_SRC emacs-lisp
  (use-package citar
    :defer 0
    :no-require
    :bind
    (("C-c b" . #'citar-open))
    (:map minibuffer-local-map ("M-b" . citar-insert-preset))
    (:map org-mode-map :package org ("C-c b" . #'org-cite-insert))
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup)
    :config
    (setq org-cite-global-bibliography '("~/Documents/Literatur/Literatur.bib"))
    (setq org-cite-insert-processor 'citar)
    (setq org-cite-follow-processor 'citar)
    (setq org-cite-activate-processor 'citar)
    ;; (setq org-cite-export-processors '((latex biblatex) (t basic)))
    (setq citar-bibliography org-cite-global-bibliography)
    (setq citar-library-paths '("~/Documents/Literatur/bibtex-pdfs"))
    (setq citar-at-point-function 'embark-act))
#+END_SRC

Embark integration is provided by /citar-embark/. Press C-. (or RET in org buffers) on any citation key to see possible actions.
#+begin_src emacs-lisp
  (use-package citar-embark
    :after citar embark
    :no-require
    :config
    (citar-embark-mode))
#+end_src

The package /citar-org-roam/ provides usage of org roam to take bibliographical notes. When enabled, the "old" or "usual" notes in my notes directory are not available anymore.
#+begin_src emacs-lisp
  (use-package citar-org-roam
    :after (citar org-roam)
    :config
    (setq citar-org-roam-capture-template-key "n")
    (setq citar-org-roam-subdir "bib")
    (citar-org-roam-mode))
#+end_src

** yasnippets (snippet expansion)

Snippet expansion
- default key for expansion is <TAB>
- company does not show snippets for completion-at-point, but there is ongoing work
  what about corfu?

#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 0
    :config
    (yas-global-mode))
#+END_SRC

Snippets aren't included in the base package. Therefore, they need to be loaded separately.

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :defer 0)
#+end_src

** which-key

This helps to figure out the next keystrokes

#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+END_SRC

** undo-tree

The package /undo-tree/ contains more features than vundo, e.g. timestamps, diffs, etc. I never used those features.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer 0
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode))
#+END_SRC

The global keybinding 'C-x u' is set below.

** Agressive Indent

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :defer 0
    :config (aggressive-indent-global-mode))
#+END_SRC

** Project.el

This is the built-in project package. I'm not sure, which feature offers that is missing from project.el and that I want to use.

What I want is:
- Open dired on project change
#+begin_src emacs-lisp
  ;; (require project)
  ;; (add-to-list 'project-switch-commands (project-dired "Dired"))
#+end_src

** editorconfig

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :diminish t
    :config
    (editorconfig-mode 1))
#+END_SRC

** openwith

#+BEGIN_SRC emacs-lisp
  (use-package openwith
    :defer 0
    :config
    (setq openwith-associations
  	(list
  	 (list (openwith-make-extension-regexp
  		'("mpg" "mpeg" "mp3" "mp4"
  		  "avi" "wmv" "wav" "mov" "flv"
  		  "ogm" "ogg" "mkv"))
  	       "xdg-open"
  	       '(file))
  	 ;; (list (openwith-make-extension-regexp
  	 ;;        '("xbm" "pbm" "pgm" "ppm" "pnm"
  	 ;;          "png" "gif" "bmp" "tif" "jpeg" "jpg"))
  	 ;;       "xdg-open"
  	 ;;       '(file))
  	 (list (openwith-make-extension-regexp
  		'("doc" "xls" "ppt" "odt" "ods" "odg" "odp" "docx" "xlsx" "pptx"))
  	       "xdg-open"
  	       '(file))))
    ;; prevent <openwith> from interfering with mail attachments
    (require 'mm-util)
    (add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler)
    ;; enable openwith mode
    (openwith-mode 1))
#+END_SRC

** COMMENT Projectile

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package projectile
    :config
    (projectile-mode 1))
#+END_SRC

** COMMENT frames-only-mode

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package frames-only-mode
    :after (embark)
    :config
    ;; make embark work with frames-only-mode enabled
    ;; see also https://github.com/oantolin/embark/issues/690
    (add-to-list 'frames-only-mode-use-window-functions 'embark-act)
    (frames-only-mode 1))
#+END_SRC

** COMMENT sway (needs shackle?)

#+begin_src emacs-lisp :tangle no
  (use-package sway
    :config
    (sway-socket-tracker-mode)
    (sway-undertaker-mode) ;; If you want to use :dedicate, read below.
    (sway-x-focus-through-sway-mode)) ;; Temporary workaround for Sway bug 6216)
#+end_src

* Some convenience functions

** Switch dictionary for flyspell
#+begin_src emacs-lisp
  (defun jf/switch-spell-dict-to-de ()
    (interactive)
    (ispell-change-dictionary "de_DE")
    (flyspell-buffer))

  (defun jf/switch-spell-dict-to-en ()
    (interactive)
    (ispell-change-dictionary "en_US")
    (flyspell-buffer))

  (defun jf/toggle-spell-dict ()
    (interactive)
    (if (equal ispell-local-dictionary "de_DE")
        (ispell-change-dictionary "en_US")
      (ispell-change-dictionary "de_DE")
      (flyspell-buffer)))
    
#+end_src
** Connect with my ZNC irc bouncer

#+BEGIN_SRC emacs-lisp
  (defun jf/my-irc()
    "Connect to my znc irc bouncer."
    (interactive)
    (erc-tls :server "irc.nuthouse.de" :nick "nutcase"))
#+END_SRC

** A more distressless writing environment

#+BEGIN_SRC emacs-lisp

    (defun jf/my-writing-mode()
      "Switch to my distress less writing mode. An alternative is \"writeroom-mode\""
      (interactive)
      (olivetti-mode)
      (variable-pitch-mode))

#+END_SRC

There is a package https://github.com/joostkremers/writeroom-mode?tab=readme-ov-file that does similar things.

** Focus on Subtree (clone + narrow)

#+begin_src emacs-lisp
  (defun jf/narrow-to-subtree-in-indirect-buffer ()
    "Create an indirect cloned buffer and narrow to org subtree in the clone."
    (interactive)
    (clone-indirect-buffer
     (concat "<org subtree> " (nth 4 (org-heading-components)))
     t)
    (org-narrow-to-subtree))
#+end_src

** Synchronization between JabRef keywords and org-roam nodes

#+begin_src emacs-lisp
  (use-package org-roam-citation-keyword-nodes
    :after roam citar
    :demand t
    :straight (org-roam-citation-keyword-nodes
  	     :type git :host github
  	     :repo "nuthub/org-roam-citation-keyword-nodes"))
#+end_src

** Open automounted drives

From https://mbork.pl/2024-02-17_Opening_external_drives_in_Dired

#+begin_src emacs-lisp
(defcustom jf/automount-directory (format "/media/%s" user-login-name)
  "Directory under which drives are automounted.")

(defun jf/automount-open-in-dired ()
  "Open the automounted drive in Dired.
If there is more than one, let the user choose."
  (interactive)
  (let ((dirs (directory-files jf/automount-directory nil "^[^.]")))
    (dired (file-name-concat
            jf/automount-directory 
            (cond ((null dirs)
                   (error "No drives mounted at the moment"))
                  ((= (length dirs) 1)
                   (car dirs))
                  (t
                   (completing-read "Open in dired: " dirs nil t)))))))
#+end_src

* Printing

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (setq lpr-command "gtklp")
    (setq ps-lpr-command "gtklp"))
#+END_SRC

* Calendar syncing

#+BEGIN_SRC emacs-lisp

  (use-package org-caldav
    :if (string= (system-name) "nutbook")
    :defer 0
    :init
    ;; This is the delayed sync function; it waits until emacs has been idle for 
    ;; "secs" seconds before syncing.  The delay is important because the caldav-sync
    ;; can take five or ten seconds, which would be painful if it did that right at save.  
    ;; This way it just waits until you've been idle for a while to avoid disturbing 
    ;; the user.
    (defvar org-caldav-sync-timer nil
      "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
    (defun org-caldav-sync-with-delay (secs)
      (when org-caldav-sync-timer
        (cancel-timer org-caldav-sync-timer))
      (setq org-caldav-sync-timer
            (run-with-idle-timer
             (* 1 secs) nil 'org-caldav-sync)))
    :config
    (setq org-icalendar-use-scheduled '(event-if-todo event-if-not-todo))
    (setq org-caldav-resume-aborted 'always)
    (setq org-icalendar-timezone "Europe/Berlin") ; holds for all my calendars
    (setq org-caldav-show-sync-results nil)
    (setq org-caldav-url nil
      	org-caldav-files nil
      	org-caldav-inbox nil
      	org-caldav-calendar-id nil)
    (setq org-caldav-calendars
  	'(
  	  (:url "https://cloud.nuthouse.de/remote.php/dav/calendars/nutcase"
  		:calendar-id "personal"
  		:files ("~/org/events-personal.org")
  		:inbox (file+headline "~/org/events-personal.org" "Inbox"))
  	  (:url "https://sogo.uni-koblenz.de/SOGo/dav/rgse/Calendar/"
  		:calendar-id "312BB5-63163180-97-5010D400"
  		:files ("~/org/events-rgse.org")
  		:inbox (file+headline "~/org/events-rgse.org" "Inbox")
  		:sync-direction 'cal->org))))

  ;; Add the delayed save hook with a five minute idle timer
  (add-hook 'after-save-hook
      	  (lambda ()
              (when (eq major-mode 'org-mode)
                (org-caldav-sync-with-delay 300))))
  ;; Final sync on kill-emacs
  (add-hook 'kill-emacs-hook
      	  (lambda ()
      	    (org-caldav-sync)
      	    (save-some-buffers)))
#+END_SRC

* Mail configuration

mu (including mu4e) needs to be installed via package manager, e.g. yay mu-git

1. run mbsync -a
2. initialize mu
   #+begin_src bash :tanlge no
     mu init \
        --my-address=foo@example.com \
        --my-address=bar@example.com \
        -m ~/Mail
   #+end_src

#+begin_src emacs-lisp

  (use-package mu4e
    :if (string= (system-name) "nutbook")
    :straight nil ;; use the system installed version
    :defer 0
    :ensure nil
    :config
    (setq mu4e-change-filenames-when-moving t)
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-update-interval(* 5 60))
    (setq mu4e-maildir "~/Mail")
    (setq mu4e-confirm-quit t)
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses t)
    (setq mu4e-org-link-query-in-headers-mode t)
    (define-key mu4e-view-mode-map (kbd "C--") nil t) ; remove key binding
    (define-key mu4e-view-mode-map (kbd "C-+") nil t) ; remove key binding
    (define-key mu4e-headers-mode-map (kbd "C--") nil t) ; remove key binding
    (define-key mu4e-headers-mode-map (kbd "C-+") nil t) ; remove key binding
    (setq mu4e-use-fancy-chars t)
    (setq mu4e-read-option-use-builtin nil)
    (setq mu4e-completing-read-function 'completing-read)
    (setq mu4e-notification-support t)
    (setq mu4e-compose-format-flowed t)
    (setq message-cite-function 'message-cite-original) ;; alternative: 'message-cite-original-without-signature
    (setq mail-user-agent 'mu4e-user-agent)
    (require 'smtpmail)
    (setq message-send-mail-function 'smtpmail-send-it)
    (setq message-kill-buffer-on-exit t)
    (setq mu4e-headers-fields
          '((:human-date . 12)
            (:flags . 6)
            (:maildir . 23)
            (:mailing-list . 10)
            (:from . 22)
            (:subject)))
    (setq mu4e-bookmarks
          '((:name "Combined inbox" :query "maildir:/private/INBOX OR maildir:/work/INBOX OR maildir:/tudo/INBOX" :key ?i)
            (:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key ?u)
            (:name "Drafts" :query "maildir:/private/Drafts OR maildir:/work/Drafts" :key ?d)
  	  (:name "Mailing-Lists" :query "maildir:/private/INBOX/*" :key ?m)
            (:name "Today's messages" :query "date:today..now" :key ?n)
            (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key ?7)
            (:name "Trashed mails" :query "flag:trashed" :hide-unread nil :key ?t)
            (:name "Messages with PDFs" :query "mime:application/pdf" :key ?p)))
    (setq mu4e-maildir-shortcuts
          '(("/private/INBOX" . ?p)
            ("/private/Archives/2024" . ?P)
  	  ("/private/autolearn/ham" . ?h)
  	  ("/private/autolearn/spam" . ?s)
  	  ("/private/Junk" . ?j)
  	  ("/work/INBOX" . ?w)
            ("/work/Archives/2024" . ?W)
  	  ("/tudo/INBOX" . ?d)))
    (setq smtpmail-queue-mail nil)  ;; start in direct mode
    (setq smtpmail-queue-dir "~/Mail/queue/cur")
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-contexts
          (list
           ;; private account
           (make-mu4e-context
            :name "Private"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/private" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "julian@flake.de")
                    (user-full-name . "Julian Flake")
                    (message-signature . nil)
                    (smtpmail-smtp-server . "nuthost.de")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 587)
                    (mu4e-drafts-folder . "/private/Drafts")
                    (mu4e-sent-folder . "/private/Sent")
                    (mu4e-refile-folder  . "/private/Archives/2024")
                    (mu4e-trash-folder . "/private/Trash")))
           ;; work account
           (make-mu4e-context
            :name "Work"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/work" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "flake@uni-koblenz.de")
                    (user-full-name    . "Julian Flake")
  		  (message-signature . "Dipl.-Inf. Julian Flake\n\nUniversity of Koblenz\nFaculty 4: Computer Science\nInstitute for Software Technology\nPB 20 16 02 | D-56016 Koblenz | Germany\n\nVoice: +49 261 287 2787\nEmail: flake@uni-koblenz.de\nhttps://www.uni-koblenz.de/~flake")
                    (smtpmail-smtp-server . "smtp.uni-koblenz.de")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-service . 465)
                    (mu4e-drafts-folder  . "/work/Drafts")
                    (mu4e-sent-folder  . "/work/Sent")
                    (mu4e-refile-folder  . "/work/Archives/2024")
                    (mu4e-trash-folder  . "/work/Trash")))
           ;; TUDo account
           (make-mu4e-context
            :name "TUDo"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/tudo" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "julian.flake@tu-dortmund.de")
                    (user-full-name . "Julian Flake")
                    (message-signature . nil)
                    (smtpmail-smtp-server . "unimail.tu-dortmund.de")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 587)
                    (mu4e-drafts-folder . "/private/Drafts")
                    (mu4e-sent-folder . "/private/Sent")
                    (mu4e-refile-folder  . "/private/Archives/2024")
                    (mu4e-trash-folder . "/private/Trash")))))

    ;; disable undo-tree for mail compose (why? I have a separate dir for )
    (add-hook 'mu4e-compose-mode-hook
              (lambda()
  		(undo-tree-mode -1)))

    ;; let me confirm every message
    (setq message-confirm-send t)

    ;; let me confirm/decline to send an email with empty subject
    (add-hook 'message-send-hook
              (lambda() (interactive)
                (or (message-field-value "Subject")
                    (yes-or-no-p "Really send without Subject? ")
                    (keyboard-quit))))

    ;; this adds the date of a cited mail:
    (setq message-citation-line-function 'message-insert-formatted-citation-line)

    ;; setup icalendar / org mode support
    (require 'mu4e-icalendar)
    (setq gnus-icalendar-org-capture-file "~/org/events-personal.org")
    (setq gnus-icalendar-org-capture-headline '("Inbox"))
    (gnus-icalendar-org-setup)
    
    ;; start mu4e (in background)
    (mu4e t)) ; end of use-package mu4e

  ;; (use-package mu4e-views
  ;;   :if (string= (system-name) "nutbook")
  ;;   :after mu4e
  ;;   :defer nil
  ;;   :bind (:map mu4e-headers-mode-map
  ;; 		("v" . mu4e-views-mu4e-select-view-msg-method) ;; select viewing method
  ;; 		("M-n" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
  ;; 		("M-p" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
  ;; 		("f" . mu4e-views-toggle-auto-view-selected-message) ;; toggle opening messages automatically when moving in the headers view
  ;; 		("i" . mu4e-views-mu4e-view-as-nonblocked-html) ;; show currently selected email with all remote content
  ;; 		)
  ;;   :config
  ;;   ;; (setq mu4e-views-completion-method 'ivy) ;; use ivy for completion
  ;;   (setq mu4e-views-default-view-method "html") ;; make xwidgets default
  ;;   (mu4e-views-mu4e-use-view-msg-method "html") ;; select the default
  ;;   (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window) ;; when pressing n and p stay in the current window
  ;;   (setq mu4e-views-auto-view-selected-message t)) ;; automatically open messages when moving in the headers view

#+end_src

When signing mails with openpgp (or gnupg), use the key associated with the sender address.

#+begin_src emacs-lisp

  (setq mml-secure-openpgp-sign-with-sender t)

#+end_src
* Global key bindings
** Increase / decrease text scale

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-+") 'text-scale-increase)
#+END_SRC

** Comment / Uncomment Region

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-,") 'comment-region)
  (global-set-key (kbd "C-x C-.") 'uncomment-region)
#+end_src

** Revert buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'revert-buffer)
#+end_src

** Open GTD file

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c t") (lambda () (interactive) (find-file "~/org/gtd.org")))
#+end_src

** Open the file under cursor

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x f") 'find-file-at-point)
#+END_SRC

** Switch dictionary

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c d") 'jf/toggle-spell-dict)
#+end_src

** undo-tree

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x u") 'undo-tree-visualize)
#+END_SRC

** COMMENT Quit dialogs with ESC
CLOSED: [2024-03-28 Thu 23:07]

#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c o") 'org-switchb)
  (global-set-key (kbd "C-c n u") 'org-roam-ui-open)
  (global-set-key (kbd "C-c j") 'consult-org-heading)
#+END_SRC

** Magit

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c g") 'magit-status)
#+end_src

** Mu4e

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c m") 'mu4e)
#+end_src

